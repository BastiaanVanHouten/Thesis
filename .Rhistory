imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery +                   Thriller + Romance + Sci.Fi + Biography + Sport + War + Family +  Musical + History + Horror + Music + Documentary + Western, # Include all genre variables
data = df_clean)
# print model
summary(model)
# Create the main regression model
model <- lm(log(Avg_Rank_Third_Year) ~ log_simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + mpaa_numeric +
log(average_budget) +
imdb.com_releasedate +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery +                   Thriller + Romance + Sci.Fi + Biography + Sport + War + Family +  Musical + History + Horror + Music + Documentary + Western, # Include all genre variables
data = df_clean)
# print model
summary(model)
bp_test <- ncvTest(model)
print(bp_test)
# Calculate the correlation matrix for numeric variables
cor_matrix <- cor(df_clean)
# Print the correlation matrix
print(cor_matrix)
setwd("~/Master/Thesis/src/data-exploration")
named_air_condit <- read_csv("../../movies_with_air_condition_named.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(tidyverse)
named_air_condit <- read_csv("../../movies_with_air_condition_named.csv")
View(named_air_condit)
named_air_condit <- read_csv("../../movies_with_air_condition_named.csv")
# Initialize an empty data frame to store the results
result_df <- data.frame(Ethnicity = character(0), T1_Count_Named = numeric(0), T1_Count_Filtered = numeric(0), T1_Count_All = numeric(0), T2_Count = numeric(0), T3_Count = numeric(0))
# Loop through each ethnicity
for (i in 1:length(ethnicities)) {
ethnicity <- ethnicities[i]
t2_count_named <- sum(named_air_condit[[paste0(ethnicity, "_condition_with_white_t2")]] == 1)
t3_count_named <- sum(named_air_condit[[paste0(ethnicity, "_condition_t3")]] == 1)
# Add the counts to the result data frame
result_df <- rbind(result_df, data.frame(Ethnicity = ethnicity, T2_Count = t2_count_named, T3_Count = t3_count_named))
}
# Print the result data frame
print(result_df)
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
library(MASS)
df <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos_endgame.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
df_clean <- df %>%
filter(imdb.com_year > 2000)
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$imdb.com_remake <- ifelse(is.na(df_clean$imdb.com_remake), 0, df_clean$imdb.com_remake)
df_clean$simpson_index <- ifelse(is.na(df_clean$simpson_index), 0, df_clean$simpson_index)
df_clean$boxofficemojo.com_openingtheaters <- ifelse(is.na(df_clean$boxofficemojo.com_openingtheaters), 0, df_clean$boxofficemojo.com_openingtheaters)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
df_clean$Metascore <- ifelse(is.na(df_clean$Metascore), 0, df_clean$Metascore)
df_clean$Total_Star_Power <- ifelse(is.na(df_clean$Total_Star_Power), 0 , df_clean$Total_Star_Power)
# Apply log transformation with small_constant
small_constant <- 1e-10  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake + small_constant)
df_clean$log_simpson_index <- log(df_clean$simpson_index + small_constant)
df_clean$log_op_theater <- log(df_clean$boxofficemojo.com_openingtheaters + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power + small_constant)
# Create dummy variables for imdb.com_year
year_dummies <- model.matrix(~ imdb.com_year - 1, data = df_clean)
# Rename the dummy variables for clarity
colnames(year_dummies) <- paste("year_", unique(df_clean$imdb.com_year), sep = "")
# Create dummy variables for imdb.com_year
year_dummies <- model.matrix(~ imdb.com_year - 1, data = df_clean)
# Rename the dummy variables for clarity
colnames(year_dummies) <- paste("year_", unique(df_clean$imdb.com_year), sep = "")
# Create an empty data frame to hold the year dummy variables
year_dummies <- data.frame()
# Get unique years from the imdb.com_year column
unique_years <- unique(df_clean$imdb.com_year)
# Create and add year dummy variables one by one
for (year in unique_years) {
dummy_var <- ifelse(df_clean$imdb.com_year == year, 1, 0)
col_name <- paste("year_", year, sep = "")
year_dummies[col_name] <- dummy_var
}
# Create an empty data frame to hold the year dummy variables with the same number of rows
year_dummies <- data.frame(matrix(0, ncol = length(unique_years), nrow = nrow(df_clean)))
# Get unique years from the imdb.com_year column
unique_years <- unique(df_clean$imdb.com_year)
# Create and add year dummy variables one by one
for (year in unique_years) {
dummy_var <- ifelse(df_clean$imdb.com_year == year, 1, 0)
col_name <- paste("year_", year, sep = "")
year_dummies[col_name] <- dummy_var
}
View(year_dummies)
# Create an empty data frame to hold the year dummy variables with the same number of rows
year_dummies <- data.frame(matrix(0, ncol = length(unique_years), nrow = nrow(df_clean)))
View(year_dummies)
# Get unique years from the imdb.com_year column
unique_years <- unique(df_clean$imdb.com_year)
# Create and add year dummy variables one by one
for (year in unique_years) {
dummy_var <- ifelse(df_clean$imdb.com_year == year, 1, 0)
col_name <- paste("year_", year, sep = "")
year_dummies[col_name] <- dummy_var
}
# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
View(df_clean)
# Create the main regression model
model <- lm(log(Avg_Rank_Third_Year) ~ log_simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + mpaa_numeric +
log(average_budget) +
imdb.com_releasedate +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# Include all genre variables
. +  # Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean)
# print model
summary(model)
# Create the main regression model
model <- lm(log(Avg_Rank_Third_Year) ~ log_simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_releasedate +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean)
# print model
summary(model)
# Create the main regression model
model <- lm(log(Avg_Rank_Third_Year) ~ simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_releasedate +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean)
# print model
summary(model)
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
# Create the main regression model
model <- lm(log(Avg_Rank_Third_Year) ~ simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_releasedate +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
Winter +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean)
# print model
summary(model)
model_variables <- c(
"Avg_Rank_Third_Year",
"simpson_index",
"boxofficemojo.com_openingtheaters",
"imdb.com_runtime",
"mpaa_numeric",
"average_budget",
"imdb.com_releasedate",
"imdb.com_sequel",
"imdb.com_spinoff",
"remake",
"imdb.com_basedonbook",
"imdb.com_basedonbookseries",
"imdb.com_basedonplay",
"imdb.com_basedoncomic",
"imdb.com_basedoncomicbook",
"imdb.com_basedonnovel",
"imdb.com_basedonshortstory",
"log_Nominee",
"log_Winner",
"log_dir_power",
"log_metascore",
"log_starpower",
"Action",
"Adventure",
"Comedy",
"Fantasy",
"Crime",
"Drama",
"Mystery",
"Thriller",
"Romance",
"Sci.Fi",
"Biography",
"Sport",
"War",
"Family",
"Musical",
"History",
"Horror",
"Music",
"Documentary",
"Western",
"Spring",
"Summer",
"Fall",
"Winter",
"2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"
)
df_clean_subset <- df_clean[model_variables]
model_variables <- c(
"Avg_Rank_Third_Year",
"simpson_index",
"boxofficemojo.com_openingtheaters",
"imdb.com_runtime",
"mpaa_numeric",
"average_budget",
"imdb.com_releasedate",
"imdb.com_sequel",
"imdb.com_spinoff",
"log_remake",
"imdb.com_basedonbook",
"imdb.com_basedonbookseries",
"imdb.com_basedonplay",
"imdb.com_basedoncomic",
"imdb.com_basedoncomicbook",
"imdb.com_basedonnovel",
"imdb.com_basedonshortstory",
"log_Nominee",
"log_Winner",
"log_dir_power",
"log_metascore",
"log_starpower",
"Action",
"Adventure",
"Comedy",
"Fantasy",
"Crime",
"Drama",
"Mystery",
"Thriller",
"Romance",
"Sci.Fi",
"Biography",
"Sport",
"War",
"Family",
"Musical",
"History",
"Horror",
"Music",
"Documentary",
"Western",
"Spring",
"Summer",
"Fall",
"Winter",
"2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"
)
df_clean_subset <- df_clean[model_variables]
View(df_clean_subset)
model_variables <- c(
"Avg_Rank_Third_Year",
"simpson_index",
"boxofficemojo.com_openingtheaters",
"imdb.com_runtime",
"mpaa_numeric",
"average_budget",
"imdb.com_releasedate",
"imdb.com_sequel",
"imdb.com_spinoff",
"log_remake",
"imdb.com_basedonbook",
"imdb.com_basedonbookseries",
"imdb.com_basedonplay",
"imdb.com_basedoncomic",
"imdb.com_basedoncomicbook",
"imdb.com_basedonnovel",
"imdb.com_basedonshortstory",
"log_Nominee",
"log_Winner",
"log_dir_power",
"log_metascore",
"log_starpower",
"Action",
"Adventure",
"Comedy",
"Fantasy",
"Crime",
"Drama",
"Mystery",
"Thriller",
"Romance",
"Sci.Fi",
"Biography",
"Sport",
"War",
"Family",
"Musical",
"History",
"Horror",
"Music",
"Documentary",
"Western",
"Spring",
"Summer",
"Fall",
"Winter",
"2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"
)
df_clean_subset <- df_clean[model_variables]
# Create the main regression model
model <- lm(log(Avg_Rank_Third_Year) ~ simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_releasedate +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
Winter +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean_subset)
# print model
summary(model)
library(stargazer)
library(stargazer)
stargazer(model)
stargazer(model, type = 'text)
stargazer(model, type = "text")
stargazer(model, type = "text")
stargazer(model, type = "text")
stargazer(model)
setwd("~/Master/Thesis")
library(tinytex)
mytable.tex <- stargazer(model)
stargazer(model, type = "text")
mytable.tex <- stargazer(model)
\input{mytable.tex}
stargazer(model, type = "text")
mytable <- stargazer(model, type = "latex", out = "mytable.tex")
cat("\\input{mytable.tex}")
stargazer(model, type = "text")
mytable <- stargazer(model, type = "latex", out = "mytable.tex")
cat("\\input{mytable.tex}")
stargazer(model, type = "text")
mytable <- stargazer(model, type = "latex", out = "mytable.tex")
cat("\\input{mytable.tex}")
stargazer(model, type = "text")
install.packages(memisc)
install.packages("memisc")
mt <- tab_model(model, title = "Regression Results", file = "", add_rows = list("N" = nrow(df_clean)), theme = "blank")
mt <- mtable(model, title = "Regression Results", file = "", add_rows = list("N" = nrow(df_clean)), theme = "blank")
mt <- mtable(model)
mt <- tab_model(model)
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
library(MASS)
library(stargazer)
library(tinytex)
library(lubridate)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
df <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos_endgame.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
stargazer(model, type = "text")
mytable <- stargazer(model, type = "text", out = "mytable.tex")
cat("\\input{mytable.tex}")
mt <- tab_model(model)
write_html(mt, "mt.html")
library(memisc)
install.packages("memisc")
install.packages("memisc")
chooseCRANmirror(graphics = FALSE)
chooseCRANmirror(graphics = FALSE)
install.packages("memisc")
install.packages("memisc")
chooseCRANmirror(graphics = FALSE)
install.packages('memisc')
install.packages('memisc', repos='http://cran.us.r-project.org')
install.packages('memisc', repos='http://cran.us.r-project.org')
