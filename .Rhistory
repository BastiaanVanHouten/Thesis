View(movie_details_OMDB_5000_6000)
library(readr)
movie_details_OMDB_6000_7000 <- read_csv("data/scraped/movie_details_OMDB_6000_7000.csv")
View(movie_details_OMDB_6000_7000)
library(readr)
movie_details_OMDB_7000_8000 <- read_csv("data/scraped/movie_details_OMDB_7000_8000.csv")
View(movie_details_OMDB_7000_8000)
library(readr)
movie_details_OMDB_8000_8660 <- read_csv("data/scraped/movie_details_OMDB_8000_8660.csv")
View(movie_details_OMDB_8000_8660)
# List of file names
file_names <- c("movie_details_OMDB_1000.csv",
"movie_details_OMDB_1000_2000.csv",
"movie_details_OMDB_2000_3000.csv",
"movie_details_OMDB_3000_4000.csv",
"movie_details_OMDB_4000_5000.csv",
"movie_details_OMDB_5000_6000.csv",
"movie_details_OMDB_6000_7000.csv",
"movie_details_OMDB_7000_8000.csv",
"movie_details_OMDB_8000_8660.csv")
# Initialize an empty data frame
combined_data <- data.frame()
for (file_name in file_names) {
file_path <- paste("data/scraped/", file_name, sep = "")
data <- read.csv(file_path, header = TRUE)
# Convert other columns to numeric
numeric_cols <- c("IMDb Rating", "IMDb Votes")
data[, numeric_cols] <- lapply(data[, numeric_cols], function(x) as.numeric(gsub("[^0-9.]", "", x)))
combined_data <- bind_rows(combined_data, data)
}
library(dplyr)
file_names <- c("movie_details_OMDB_1000.csv",
"movie_details_OMDB_1000_2000.csv",
"movie_details_OMDB_2000_3000.csv",
"movie_details_OMDB_3000_4000.csv",
"movie_details_OMDB_4000_5000.csv",
"movie_details_OMDB_5000_6000.csv",
"movie_details_OMDB_6000_7000.csv",
"movie_details_OMDB_7000_8000.csv",
"movie_details_OMDB_8000_8660.csv")
combined_data <- data.frame()
for (file_name in file_names) {
file_path <- paste("data/scraped/", file_name, sep = "")
data <- read.csv(file_path, header = TRUE)
# Convert IMDb ID to character
data$`IMDb ID` <- as.character(data$`IMDb ID`)
# Convert Awards and Nominations to character
data$`Awards and Nominations` <- as.character(data$`Awards and Nominations`)
# Convert MPAA Rating to character
data$`MPAA Rating` <- as.character(data$`MPAA Rating`)
# Convert IMDb Rating and IMDb Votes to numeric (handling variations)
if ("IMDb Rating" %in% colnames(data)) {
data$`IMDb Rating` <- as.numeric(data$`IMDb Rating`)
}
if ("IMDb Votes" %in% colnames(data)) {
data$`IMDb Votes` <- as.numeric(data$`IMDb Votes`)
}
# Convert other columns to numeric (handling variations)
numeric_cols <- c("Rotten Tomatoes Value", "Metacritic Value", "Box Office", "Internet Movie Database", "Metascore")
for (col in numeric_cols) {
if (col %in% colnames(data)) {
data[, col] <- as.numeric(gsub("[^0-9.]", "", data[, col]))
}
}
combined_data <- bind_rows(combined_data, data)
}
library(dplyr)
file_names <- c("movie_details_OMDB_1000.csv",
"movie_details_OMDB_1000_2000.csv",
"movie_details_OMDB_2000_3000.csv",
"movie_details_OMDB_3000_4000.csv",
"movie_details_OMDB_4000_5000.csv",
"movie_details_OMDB_5000_6000.csv",
"movie_details_OMDB_6000_7000.csv",
"movie_details_OMDB_7000_8000.csv",
"movie_details_OMDB_8000_8660.csv")
combined_data <- data.frame()
for (file_name in file_names) {
file_path <- paste("data/scraped/", file_name, sep = "")
data <- read.csv(file_path, header = TRUE)
# Convert IMDb ID to character
if ("IMDb ID" %in% colnames(data)) {
data$`IMDb ID` <- as.character(data$`IMDb ID`)
}
# Convert Awards and Nominations to character
if ("Awards and Nominations" %in% colnames(data)) {
data$`Awards and Nominations` <- as.character(data$`Awards and Nominations`)
}
# Convert MPAA Rating to character
if ("MPAA Rating" %in% colnames(data)) {
data$`MPAA Rating` <- as.character(data$`MPAA Rating`)
}
# Convert IMDb Rating and IMDb Votes to numeric (handling variations)
if ("IMDb Rating" %in% colnames(data)) {
data$`IMDb Rating` <- as.numeric(data$`IMDb Rating`)
}
if ("IMDb Votes" %in% colnames(data)) {
data$`IMDb Votes` <- as.numeric(data$`IMDb Votes`)
}
# Convert other columns to numeric (handling variations)
numeric_cols <- c("Rotten Tomatoes Value", "Metacritic Value", "Box Office", "Internet Movie Database", "Metascore")
for (col in numeric_cols) {
if (col %in% colnames(data)) {
data[, col] <- as.numeric(gsub("[^0-9.]", "", data[, col]))
}
}
combined_data <- bind_rows(combined_data, data)
}
library(dplyr)
file_names <- c("movie_details_OMDB_1000.csv",
"movie_details_OMDB_1000_2000.csv",
"movie_details_OMDB_2000_3000.csv",
"movie_details_OMDB_3000_4000.csv",
"movie_details_OMDB_4000_5000.csv",
"movie_details_OMDB_5000_6000.csv",
"movie_details_OMDB_6000_7000.csv",
"movie_details_OMDB_7000_8000.csv",
"movie_details_OMDB_8000_8660.csv")
combined_data <- data.frame()
for (file_name in file_names) {
file_path <- paste("data/scraped/", file_name, sep = "")
data <- read.csv(file_path, header = TRUE)
# Convert IMDb ID to character
if ("IMDb ID" %in% colnames(data)) {
data$`IMDb ID` <- as.character(data$`IMDb ID`)
}
# Convert Awards and Nominations to character
if ("Awards and Nominations" %in% colnames(data)) {
data$`Awards and Nominations` <- as.character(data$`Awards and Nominations`)
}
# Convert MPAA Rating to character
if ("MPAA Rating" %in% colnames(data)) {
data$`MPAA Rating` <- as.character(data$`MPAA Rating`)
}
# Convert IMDb Rating and IMDb Votes to numeric (handling variations)
if ("IMDb Rating" %in% colnames(data)) {
data$`IMDb Rating` <- as.numeric(data$`IMDb Rating`)
}
if ("IMDb Votes" %in% colnames(data)) {
data$`IMDb Votes` <- as.numeric(data$`IMDb Votes`)
}
# Convert other columns to numeric (handling variations)
numeric_cols <- c("Rotten Tomatoes Value", "Metacritic Value", "Box Office", "Internet Movie Database", "Metascore")
for (col in numeric_cols) {
if (col %in% colnames(data)) {
data[, col] <- as.numeric(gsub("[^0-9.]", "", data[, col]))
}
}
combined_data <- bind_rows(combined_data, data)
}
library(dplyr)
file_names <- c("movie_details_OMDB_1000.csv",
"movie_details_OMDB_1000_2000.csv",
"movie_details_OMDB_2000_3000.csv",
"movie_details_OMDB_3000_4000.csv",
"movie_details_OMDB_4000_5000.csv",
"movie_details_OMDB_5000_6000.csv",
"movie_details_OMDB_6000_7000.csv",
"movie_details_OMDB_7000_8000.csv",
"movie_details_OMDB_8000_8660.csv")
combined_data <- data.frame()
for (file_name in file_names) {
file_path <- paste("data/scraped/", file_name, sep = "")
data <- read.csv(file_path, header = TRUE)
# Convert IMDb ID to character
if ("IMDb ID" %in% colnames(data)) {
data$`IMDb ID` <- as.character(data$`IMDb ID`)
}
# Convert Awards and Nominations to character
if ("Awards and Nominations" %in% colnames(data)) {
data$`Awards and Nominations` <- as.character(data$`Awards and Nominations`)
}
# Convert MPAA Rating to character
if ("MPAA Rating" %in% colnames(data)) {
data$`MPAA Rating` <- as.character(data$`MPAA Rating`)
}
# Convert IMDb Rating to numeric (handling variations)
if ("IMDb Rating" %in% colnames(data)) {
data$`IMDb Rating` <- as.numeric(gsub("[^0-9.]", "", data$`IMDb Rating`))
}
# Convert IMDb Votes to numeric (handling variations)
if ("IMDb Votes" %in% colnames(data)) {
data$`IMDb Votes` <- as.numeric(gsub("[^0-9,]", "", data$`IMDb Votes`))
}
# Convert other columns to numeric (handling variations)
numeric_cols <- c("Rotten Tomatoes Value", "Metacritic Value", "Box Office", "Internet Movie Database", "Metascore")
for (col in numeric_cols) {
if (col %in% colnames(data)) {
data[, col] <- as.numeric(gsub("[^0-9.]", "", data[, col]))
}
}
combined_data <- bind_rows(combined_data, data)
}
library(dplyr)
file_names <- c("movie_details_OMDB_1000.csv",
"movie_details_OMDB_1000_2000.csv",
"movie_details_OMDB_2000_3000.csv",
"movie_details_OMDB_3000_4000.csv",
"movie_details_OMDB_4000_5000.csv",
"movie_details_OMDB_5000_6000.csv",
"movie_details_OMDB_6000_7000.csv",
"movie_details_OMDB_7000_8000.csv",
"movie_details_OMDB_8000_8660.csv")
combined_data <- data.frame()
for (file_name in file_names) {
file_path <- paste("data/scraped/", file_name, sep = "")
data <- read.csv(file_path, header = TRUE)
# Convert IMDb ID to character
if ("IMDb ID" %in% colnames(data)) {
data$`IMDb ID` <- as.character(data$`IMDb ID`)
}
# Convert Awards and Nominations to character
if ("Awards and Nominations" %in% colnames(data)) {
data$`Awards and Nominations` <- as.character(data$`Awards and Nominations`)
}
# Convert MPAA Rating to character
if ("MPAA Rating" %in% colnames(data)) {
data$`MPAA Rating` <- as.character(data$`MPAA Rating`)
}
# Convert IMDb Rating to numeric (handling variations)
if ("IMDb Rating" %in% colnames(data)) {
data$`IMDb Rating` <- as.numeric(gsub("[^0-9.]", "", data$`IMDb Rating`))
}
# Convert IMDb Votes to numeric (handling variations)
if ("IMDb Votes" %in% colnames(data)) {
data$`IMDb Votes` <- as.numeric(gsub("[^0-9,]", "", data$`IMDb Votes`))
}
# Convert other columns to numeric (handling variations)
numeric_cols <- c("Rotten Tomatoes Value", "Metacritic Value", "Box Office", "Internet Movie Database", "Metascore")
for (col in numeric_cols) {
if (col %in% colnames(data)) {
data[, col] <- as.numeric(gsub("[^0-9.]", "", data[, col]))
}
}
combined_data <- bind_rows(combined_data, data)
}
library(dplyr)
file_names <- c("movie_details_OMDB_1000.csv",
"movie_details_OMDB_1000_2000.csv",
"movie_details_OMDB_2000_3000.csv",
"movie_details_OMDB_3000_4000.csv",
"movie_details_OMDB_4000_5000.csv",
"movie_details_OMDB_5000_6000.csv",
"movie_details_OMDB_6000_7000.csv",
"movie_details_OMDB_7000_8000.csv",
"movie_details_OMDB_8000_8660.csv")
combined_data <- data.frame()
for (file_name in file_names) {
file_path <- paste("data/scraped/", file_name, sep = "")
data <- read.csv(file_path, header = TRUE)
# Convert IMDb ID to character
if ("IMDb ID" %in% colnames(data)) {
data$`IMDb ID` <- as.character(data$`IMDb ID`)
}
# Convert Awards and Nominations to character
if ("Awards and Nominations" %in% colnames(data)) {
data$`Awards and Nominations` <- as.character(data$`Awards and Nominations`)
}
# Convert MPAA Rating to character
if ("MPAA Rating" %in% colnames(data)) {
data$`MPAA Rating` <- as.character(data$`MPAA Rating`)
}
# Convert IMDb Rating to numeric (handling variations)
if ("IMDb Rating" %in% colnames(data)) {
data$`IMDb Rating` <- as.numeric(data$`IMDb Rating`)
}
# Convert IMDb Votes to numeric (handling variations)
if ("IMDb Votes" %in% colnames(data)) {
data$`IMDb Votes` <- as.numeric(gsub("[^0-9,]", "", data$`IMDb Votes`))
}
# Convert other columns to numeric (handling variations)
numeric_cols <- c("Rotten Tomatoes Value", "Metacritic Value", "Box Office", "Internet Movie Database", "Metascore")
for (col in numeric_cols) {
if (col %in% colnames(data)) {
data[, col] <- as.numeric(gsub("[^0-9.]", "", data[, col]))
}
}
combined_data <- bind_rows(combined_data, data)
}
library(readr)
movie_details_OMDB_1000 <- read_csv("data/scraped/movie_details_OMDB_1000.csv",
col_types = cols(`Rotten Tomatoes Value` = col_number(),
`Metacritic Value` = col_number(),
`IMDb Rating` = col_number(), `IMDb Votes` = col_number(),
`Box Office` = col_number(), `Internet Movie Database` = col_number(),
Metascore = col_number()))
View(movie_details_OMDB_1000)
library(purrr)
library(readr)
# List of file names
file_names <- c("movie_details_OMDB_1000.csv",
"movie_details_OMDB_1000_2000.csv",
"movie_details_OMDB_2000_3000.csv",
"movie_details_OMDB_3000_4000.csv",
"movie_details_OMDB_4000_5000.csv",
"movie_details_OMDB_5000_6000.csv",
"movie_details_OMDB_6000_7000.csv",
"movie_details_OMDB_7000_8000.csv",
"movie_details_OMDB_8000_8660.csv")
# Function to read CSV with specific column types
read_csv_with_types <- function(file_path) {
read_csv(file_path,
col_types = cols(`Rotten Tomatoes Value` = col_number(),
`Metacritic Value` = col_number(),
`IMDb Rating` = col_number(),
`IMDb Votes` = col_number(),
`Box Office` = col_number(),
`Internet Movie Database` = col_number(),
Metascore = col_number()))
}
# Read and combine all CSV files with specific column types
combined_data <- map_dfr(file_names, ~ read_csv_with_types(paste("data/scraped/", .x, sep = "")))
head(combined_data)
View(combined_data)
# Count the number of incomplete cases
incomplete_count <- sum(rowSums(is.na(combined_data)) > 0)
# Print the count
cat("Number of incomplete cases:", incomplete_count, "\n")
# Remove the "Production" column
combined_data <- select(combined_data, -Production)
# Print the updated dataframe
head(combined_data)
# Count the number of incomplete cases
incomplete_count <- sum(rowSums(is.na(combined_data)) > 0)
# Print the count
cat("Number of incomplete cases:", incomplete_count, "\n")
# Count the number of NA values in the Box Office column
na_count_box_office <- sum(is.na(combined_data$`Box Office`))
# Print the count
cat("Number of NA values in Box Office column:", na_count_box_office, "\n")
View(MASTER_2000_2020)
# Save the dataset
write_csv(combined_data, file.path("gen", "data-preparation", "temp", "awards_ratings"))
# Save the dataset
write_csv(combined_data, file.path("gen", "data-preparation", "temp", "awards_ratings.csv"))
library(readr)
MASTER_2000_2020 <- read_csv("data/MASTER_2000-2020.csv")
View(MASTER_2000_2020)
library(readr)
awards_ratings <- read_csv("gen/data-preparation/temp/awards_ratings.csv")
View(awards_ratings)
library(readr)
main_base <- read_csv("gen/data-preparation/temp/main_base.csv")
View(main_base)
final_movie_dataset <- inner_join(main_base.csv, MASTER_2000_2020, by = c(imdb_id = imdb.com_imdbid))
final_movie_dataset <- inner_join(main_base, MASTER_2000_2020, by = c(imdb_id = imdb.com_imdbid))
final_movie_dataset <- inner_join(main_base, MASTER_2000_2020, by = c("imdb_id" = "imdb.com_imdbid"))
View(final_movie_dataset)
# Count the number of NA values in the boxofficemojo.com_openingtheaters column
na_count_opening_theaters <- sum(is.na(final_movie_dataset$`boxofficemojo.com_openingtheaters`))
# Print the count
cat("Number of NA values in boxofficemojo.com_openingtheaters column:", na_count_opening_theaters, "\n")
# Count the number of NA values in the boxofficemojo.com_openingtheaters column
na_count_opening_theaters <- sum(is.na(final_movie_dataset$`boxofficemojo.com_budget`))
# Print the count
cat("Number of NA values in boxofficemojo.com_openingtheaters column:", na_count_opening_theaters, "\n")
# Count the number of NA values in the boxofficemojo.com_openingtheaters column
na_count_opening_theaters <- sum(is.na(final_movie_dataset$budget`))
# Print the count
cat("Number of NA values in boxofficemojo.com_openingtheaters column:", na_count_opening_theaters, "\n")
# Count the number of NA values in the boxofficemojo.com_openingtheaters column
na_count_opening_theaters <- sum(is.na(final_movie_dataset$budget))
# Print the count
cat("Number of NA values in boxofficemojo.com_openingtheaters column:", na_count_opening_theaters, "\n")
# Count the number of NA values in the boxofficemojo.com_openingtheaters column
na_count_opening_theaters <- sum(is.na(final_movie_dataset$`budget`))
# Count the number of NA values in the budget column
na_count_budget <- sum(is.na(final_movie_dataset$budget))
# Print the count
cat("Number of NA values in budget column:", na_count_budget, "\n")
final_movie_dataset_awards <- left_join(final_movie_dataset, awards_ratings, by = c("imdb_id" = "IMDB ID")
final_movie_dataset_awards <- left_join(final_movie_dataset, awards_ratings, by = c("imdb_id" = "IMDB ID")
final_movie_dataset_awards <- left_join(final_movie_dataset, awards_ratings, by = c("imdb_id" = "IMDB ID"))
final_movie_dataset_awards <- left_join(final_movie_dataset, awards_ratings, by = c("imdb_id" = "IMDb ID"))
View(final_movie_dataset_awards)
library(readr)
scraped_budgets <- read_csv("data/scraped/scraped_budgets.csv")
View(scraped_budgets)
final_movie_dataset_imdb_budget <- left_join(final_movie_dataset, awards_ratings, by = c("imdb_id" = "Movie ID")
final_movie_dataset_imdb_budget <- left_join(final_movie_dataset, awards_ratings, by = c("imdb_id" = "Movie ID"))
final_movie_dataset_imdb_budget <- left_join(final_movie_dataset, awards_ratings, by = c("imdb_id" = "Movie ID"))
final_movie_dataset_imdb_budget <- left_join(final_movie_dataset, awards_ratings, by = c("imdb_id" = "Movie ID"))
final_movie_dataset_imdb_budget <- left_join(final_movie_dataset, scraped_budgets, by = c("imdb_id" = "Movie ID"))
final_movie_dataset_imdb_budget <- left_join(final_movie_dataset_awards, scraped_budgets, by = c("imdb_id" = "Movie ID"))
library(readr)
movie_budget_revenue_sequal_TMDB <- read_csv("data/scraped/movie_budget_revenue_sequal_TMDB.csv")
View(movie_budget_revenue_sequal_TMDB)
View(final_movie_dataset_imdb_budget)
# Count the number of movies with 0 or NA values in multiple budget-related variables
count_zero_na_budgets <- sum(
final_movie_dataset_imdb_budget$budget == 0 | is.na(final_movie_dataset_imdb_budget$budget),
final_movie_dataset_imdb_budget$`boxofficemojo.com_budget` == 0 | is.na(final_movie_dataset_imdb_budget$`boxofficemojo.com_budget`),
final_movie_dataset_imdb_budget$Budget == 0 | is.na(final_movie_dataset_imdb_budget$Budget)
)
# Print the count
cat("Number of movies with 0 or NA values in budget-related variables:", count_zero_na_budgets, "\n")
# Count the number of observations with 0 or NA values in all three variables
count_zero_na_all_budgets <- sum(
rowSums(final_movie_dataset_imdb_budget[, c('budget', 'boxofficemojo.com_budget', 'Budget')] == 0 |
is.na(final_movie_dataset_imdb_budget[, c('budget', 'boxofficemojo.com_budget', 'Budget')])) == 3
)
# Print the count
cat("Number of observations with 0 or NA values in all budget-related variables:", count_zero_na_all_budgets, "\n")
# Count the number of NA values in the budget column
na_count_budget <- sum(is.na(final_movie_dataset$Budget))
# Print the count
cat("Number of NA values in budget column:", na_count_budget, "\n")
# Replace 'Not available' with 0 in the 'Budget' column
final_movie_dataset_imdb_budget <- final_movie_dataset_imdb_budget %>%
mutate(Budget = ifelse(Budget == 'Not available', 0, Budget))
# Count the number of observations with 0 or NA values in all three variables
count_zero_na_all_budgets <- sum(
rowSums(final_movie_dataset_imdb_budget[, c('budget', 'boxofficemojo.com_budget', 'Budget')] == 0 |
is.na(final_movie_dataset_imdb_budget[, c('budget', 'boxofficemojo.com_budget', 'Budget')])) == 3
)
# Count the number of observations with 0 or NA values in all three variables
count_zero_na_all_budgets <- sum(
rowSums(final_movie_dataset_imdb_budget[, c('budget', 'boxofficemojo.com_budget', 'Budget')] == 0 |
is.na(final_movie_dataset_imdb_budget[, c('budget', 'boxofficemojo.com_budget', 'Budget')])) == 3
)
# Count the number of observations with 0 or NA values in all three variables
count_zero_na_all_budgets <- sum(
rowSums(final_movie_dataset_imdb_budget[, c('budget', 'boxofficemojo.com_budget', 'Budget')] == 0 |
is.na(final_movie_dataset_imdb_budget[, c('budget', 'boxofficemojo.com_budget', 'Budget')])) == 3
)
# Print the count
cat("Number of observations with 0 or NA values in all budget-related variables:", count_zero_na_all_budgets, "\n")
# Count the number of NA values in the boxofficemojo.com_openingtheaters column
na_count_opening_theaters <- sum(is.na(final_movie_dataset$`boxofficemojo.com_budget`))
# Print the count
cat("Number of NA values in boxofficemojo.com_openingtheaters column:", na_count_opening_theaters, "\n")
# Count the number of NA values in the budget column
na_count_budget <- sum(is.na(final_movie_dataset$Budget))
# Print the count
cat("Number of NA values in budget column:", na_count_budget, "\n")
# Count the number of 0 values in the 'Budget' column
count_zeros_budget <- sum(final_movie_dataset_imdb_budget$Budget == 0)
# Print the count
cat("Number of 0 values in 'Budget' column:", count_zeros_budget, "\n")
# Count the number of 0 values in the 'Budget' column
count_zeros_budget <- sum(final_movie_dataset_imdb_budget$budget == 0)
# Print the count
cat("Number of 0 values in 'Budget' column:", count_zeros_budget, "\n")
library(readr)
scraped_budgets_imdb <- read_csv("data/scraped/scraped_budgets_imdb.csv")
View(scraped_budgets_imdb)
# Count the number of 0 values in the 'Budget' column
count_zeros_budget <- sum(scraped_budgets_imdb$Budget == "Not available")
# Print the count
cat("Number of 0 values in 'Budget' column:", count_zeros_budget, "\n")
everything_me <- full_join(main_base, scraped_budgets_imdb, by = c("imdb_id" = "Movie ID"))
library(readr)
directors <- read_csv("gen/data-preparation/temp/directors.csv")
View(directors)
everything_me_final <- full_join(main_base, awards_ratings, by = c("imdb_id" = "IMDb ID"))
everything_me_final <- full_join(everything_me, awards_ratings, by = c("imdb_id" = "IMDb ID"))
View(everything_me_final)
everything_me_final_directors <- inner_join(everything_me_final, directors , by c("imdb_id" = "tconst"))
everything_me_final_directors <- inner_join(everything_me_final, directors , by = c("imdb_id" = "tconst"))
View(everything_me_final_directors)
library(readr)
four_most_important_actors_imdb <- read_csv("gen/data-preparation/temp/four_most_important_actors_imdb.csv")
View(four_most_important_actors_imdb)
View(movie_budget_revenue_sequal)
evetything_me_final_actors <- inner_join(everything_me_final_directors, movie_budget_revenue_sequal_TMDB , by = c("title" = "Title") )
View(evetything_me_final_actors)
# Count the number of incomplete cases in the everything_me_final_actors dataframe
incomplete_count <- sum(!complete.cases(everything_me_final_actors))
everything_me_final_actors <- inner_join(everything_me_final_directors, movie_budget_revenue_sequal_TMDB , by = c("title" = "Title") )
# Count the number of incomplete cases in the everything_me_final_actors dataframe
incomplete_count <- sum(!complete.cases(everything_me_final_actors))
# Print the count
cat("Number of incomplete cases in everything_me_final_actors:", incomplete_count, "\n")
everything_me_final_actors <- inner_join(everything_me_final_directors, movie_budget_revenue_sequal_TMDB , by = c("title" = "Title") )
View(evetything_me_final_actors)
# Count the number of observations with 0 or NA values in all three variables
count_zero_na_all_budgets <- sum(
rowSums(everything_me_final_actors[, c('budget', 'Budget.y', 'Budget.x')] == 0 |
is.na(final_movie_dataset_imdb_budget[, c('budget', 'boxofficemojo.com_budget', 'Budget')])) == 3
)
# Replace 'Not available' with 0 in the 'Budget' column
final_movie_dataset_scraped <- everything_me_final_actors %>%
mutate(Budget = ifelse(Budget == 'Not available', 0, Budget))
# Replace 'Not available' with 0 in the 'Budget' column
final_movie_dataset_scraped <- everything_me_final_actors %>%
mutate(Budget = ifelse(Budget.x == 'Not available', 0, Budget))
# Replace 'Not available' with 0 in the 'Budget' column
final_movie_dataset_scraped <- everything_me_final_actors %>%
mutate(Budget.x = ifelse(Budget.x == 'Not available', 0, Budget))
# Replace 'Not available' with 0 in the 'Budget' column
final_movie_dataset_scraped <- everything_me_final_actors %>%
mutate(Budget.x = ifelse(Budget.x == 'Not available', 0, Budget.x))
View(final_movie_dataset_scraped)
# Count the number of observations with 0 or NA values in all three variables
count_zero_na_all_budgets <- sum(
rowSums(everything_me_final_actors[, c('budget', 'Budget.y', 'Budget.x')] == 0 |
is.na(final_movie_dataset_imdb_budget[, c('budget', 'boxofficemojo.com_budget', 'Budget')])) == 3
)
# Count the number of observations with 0 or NA values in all three variables
count_zero_na_all_budgets <- sum(
rowSums(final_movie_dataset_scraped[, c('budget', 'Budget.y', 'Budget.x')] == 0 |
is.na(final_movie_dataset_scraped[, c('budget', 'boxofficemojo.com_budget', 'Budget')])) == 3
)
# Count the number of observations with 0 or NA values in all three variables
count_zero_na_all_budgets <- sum(
rowSums(final_movie_dataset_scraped[, c('budget', 'Budget.y', 'Budget.x')] == 0 |
is.na(final_movie_dataset_scraped[, c('budget', 'Budget.y', 'Budget.x')])) == 3
)
# Print the count
cat("Number of observations with 0 or NA values in any budget-related variables:", count_zero_na_any_budgets, "\n")
# Print the count
cat("Number of observations with 0 or NA values in any budget-related variables:", count_zero_na_all_budgets, "\n")
