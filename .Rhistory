)
# Subset your dataset to include only the first three movies
subset_dataset <- the_final_ethnicity_file %>% filter(`Movie ID` %in% c(1, 2, 3))
View(subset_dataset)
# Subset your dataset to include only the first three movies
subset_dataset <- the_final_ethnicity_file %>% filter(`Movie ID` == tt0118715)
# Subset your dataset to include only the first three movies
subset_dataset <- the_final_ethnicity_file %>% filter(`Movie ID` == "tt0118715")
View(subset_dataset)
# Subset your dataset to include only the first three movies
subset_dataset <- the_final_ethnicity_file %>% filter(`Movie ID` == "tt0118715" | `Movie ID` == "tt0120815" )
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(movie_data) {
# Filter only the assigned ethnicity columns
assigned_ethnicity_data <- movie_data[, c("Assigned_Asian", "Assigned_Black", "Assigned_Hispanic", "Assigned_White")]
# Calculate the Simpson Diversity Index based on assigned categories
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie
result <- subset_dataset  %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
View(result)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Assign individuals to race or ethnicity categories based on probabilities
the_final_ethnicity_file <- the_final_ethnicity_file %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Subset your dataset to include only the first three movies
subset_dataset <- the_final_ethnicity_file %>%
filter(`Movie ID` == "tt0118715" | `Movie ID` == "tt0120815")
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(movie_data) {
# Filter only the assigned ethnicity columns
assigned_ethnicity_data <- movie_data[, c("Assigned_Asian", "Assigned_Black", "Assigned_Hispanic", "Assigned_White")]
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Calculate the Simpson Diversity Index based on assigned categories
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie
result <- subset_dataset %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
View(result)
# Apply the function to calculate the Simpson Diversity Index for each movie
result <- the_final_ethnicity_file %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
View(result)
# Apply the function to calculate the Simpson Diversity Index for each movie
result <- subset_dataset %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
View(result)
# Load the necessary libraries
library(dplyr)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Assign individuals to race or ethnicity categories based on probabilities
the_final_ethnicity_file <- the_final_ethnicity_file %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Subset dataset to include only the first three movies
subset_dataset <- the_final_ethnicity_file %>%
filter(`Movie ID` == "tt0118715" | `Movie ID` == "tt0120815")
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(movie_data) {
# Filter only the assigned ethnicity columns
assigned_ethnicity_data <- movie_data[, c("Assigned_Asian", "Assigned_Black", "Assigned_Hispanic", "Assigned_White")]
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Calculate the Simpson Diversity Index based on assigned categories
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie
result <- subset_dataset %>%
group_by('Movie ID') %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
View(result)
# Load the necessary libraries
library(dplyr)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Assign individuals to race or ethnicity categories based on probabilities
the_final_ethnicity_file <- the_final_ethnicity_file %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(movie_data) {
# Filter only the assigned ethnicity columns
assigned_ethnicity_data <- movie_data[, c("Assigned_Asian", "Assigned_Black", "Assigned_Hispanic", "Assigned_White")]
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Calculate the Simpson Diversity Index based on assigned categories
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie
result <- the_final_ethnicity_file %>%
group_by('Movie ID') %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
View(result)
# Load the necessary libraries
library(dplyr)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Assign individuals to race or ethnicity categories based on probabilities
the_final_ethnicity_file <- the_final_ethnicity_file %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(movie_data) {
# Filter only the assigned ethnicity columns
assigned_ethnicity_data <- movie_data[, c("Assigned_Asian", "Assigned_Black", "Assigned_Hispanic", "Assigned_White")]
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Calculate the Simpson Diversity Index based on assigned categories
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie
result <- the_final_ethnicity_file %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
View(result)
# Apply the function to calculate the Simpson Diversity Index for each movie
result <- the_final_ethnicity_file %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
View(result)
# Load the necessary libraries
library(dplyr)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Assign individuals to race or ethnicity categories based on probabilities
the_final_ethnicity_file <- the_final_ethnicity_file %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(movie_data) {
# Filter only the assigned ethnicity columns
assigned_ethnicity_data <- movie_data[, c("Assigned_Asian", "Assigned_Black", "Assigned_Hispanic", "Assigned_White")]
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Calculate the Simpson Diversity Index based on assigned categories
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie separately
result <- the_final_ethnicity_file %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
View(result)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Assign individuals to race or ethnicity categories based on probabilities
the_final_ethnicity_file <- the_final_ethnicity_file %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(assigned_ethnicity_data) {
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Calculate the Simpson Diversity Index based on assigned categories
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie separately
result <- the_final_ethnicity_file %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(assigned_ethnicity_data) {
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Ensure that the assigned ethnicity columns are numeric
assigned_ethnicity_data <- assigned_ethnicity_data %>%
mutate(across(starts_with("Assigned_"), as.numeric))
# Calculate the Simpson Diversity Index based on assigned categories
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie separately
result <- the_final_ethnicity_file %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
# Check the data types of the assigned ethnicity columns
str(the_final_ethnicity_file[, c("Assigned_Asian", "Assigned_Black", "Assigned_Hispanic", "Assigned_White")])
# Check for non-numeric values in the Assigned ethnicity columns
non_numeric_values <- the_final_ethnicity_file %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White)) %>%
filter(!is.numeric(Assigned_Asian) | !is.numeric(Assigned_Black) | !is.numeric(Assigned_Hispanic) | !is.numeric(Assigned_White))
# Check for NA values in the Assigned ethnicity columns
na_values <- the_final_ethnicity_file %>%
filter(is.na(Assigned_Asian) | is.na(Assigned_Black) | is.na(Assigned_Hispanic) | is.na(Assigned_White))
# Print the non-numeric values and NA values
print(non_numeric_values)
print(na_values)
# Filter rows where 'asian' is not NA
subset <- the_final_ethnicity_file %>%
filter(!is.na(asian))
# Assign individuals to race or ethnicity categories based on probabilities
subset <- subset %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Load the necessary libraries
library(dplyr)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Filter rows where 'asian' is not NA
subset <- the_final_ethnicity_file %>%
filter(!is.na(asian))
# Assign individuals to race or ethnicity categories based on probabilities
subset <- subset %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(assigned_ethnicity_data) {
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Ensure that the assigned ethnicity columns are numeric
assigned_ethnicity_data <- assigned_ethnicity_data %>%
mutate(across(starts_with("Assigned_"), as.numeric))
# Calculate the Simpson Diversity Index based on assigned categories
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie separately
result <- subset %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
# Filter rows where 'asian' is not NA
subset <- the_final_ethnicity_file %>%
filter(!is.na(asian))
View(subset)
# Assign individuals to race or ethnicity categories based on probabilities
subset <- subset %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
subset <- subset %>%
mutate(
across(starts_with("Assigned_"), as.numeric)
)
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(assigned_ethnicity_data) {
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Ensure that the assigned ethnicity columns are numeric
assigned_ethnicity_data <- assigned_ethnicity_data %>%
mutate(across(starts_with("Assigned_"), as.numeric))
# Calculate the Simpson Diversity Index based on assigned categories
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie separately
result <- subset %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
# Load the necessary libraries
library(dplyr)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Filter rows where 'asian' is not NA
subset <- the_final_ethnicity_file %>%
filter(!is.na(asian))
# Assign individuals to race or ethnicity categories based on probabilities
subset <- subset %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
subset <- subset %>%
mutate(
across(starts_with("Assigned_"), as.numeric)
)
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(assigned_ethnicity_data) {
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Ensure that the assigned ethnicity columns are numeric
assigned_ethnicity_data <- assigned_ethnicity_data %>%
mutate(across(starts_with("Assigned_"), as.numeric))
# Check if there are any rows with at least one 'Assigned' variable equal to 1
has_assigned_values <- any(rowSums(assigned_ethnicity_data[, starts_with("Assigned_")]) > 0)
# Calculate the Simpson Diversity Index only if there are rows with 'Assigned' values equal to 1
if (has_assigned_values) {
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
} else {
simpson_index <- NA  # No 'Assigned' values equal to 1, so Simpson index is NA
}
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie separately
result <- subset %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
# Load the necessary libraries
library(dplyr)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Filter rows where 'asian' is not NA
subset <- the_final_ethnicity_file %>%
filter(!is.na(asian))
# Assign individuals to race or ethnicity categories based on probabilities
subset <- subset %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(assigned_ethnicity_data) {
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Ensure that the assigned ethnicity columns are numeric
assigned_ethnicity_data <- assigned_ethnicity_data %>%
select(starts_with("Assigned_")) %>%  # Select the 'Assigned_' columns
mutate_all(as.numeric)  # Convert all selected columns to numeric
# Check if there are any rows with at least one 'Assigned' variable equal to 1
has_assigned_values <- any(rowSums(assigned_ethnicity_data) > 0)
# Calculate the Simpson Diversity Index only if there are rows with 'Assigned' values equal to 1
if (has_assigned_values) {
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
} else {
simpson_index <- NA  # No 'Assigned' values equal to 1, so Simpson index is NA
}
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie separately
result <- subset %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
View(result)
# Load the necessary libraries
library(dplyr)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Filter rows where 'asian' is not NA
subset <- the_final_ethnicity_file %>%
filter(!is.na(asian))
# Assign individuals to race or ethnicity categories based on probabilities
subset <- subset %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(assigned_ethnicity_data) {
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Ensure that the assigned ethnicity columns are numeric
assigned_ethnicity_data <- assigned_ethnicity_data %>%
select(starts_with("Assigned_")) %>%  # Select the 'Assigned_' columns
mutate_at(vars(starts_with("Assigned_")), as.numeric)  # Convert selected columns to numeric
# Check if there are any rows with at least one 'Assigned' variable equal to 1
has_assigned_values <- any(rowSums(assigned_ethnicity_data) > 0)
# Calculate the Simpson Diversity Index only if there are rows with 'Assigned' values equal to 1
if (has_assigned_values) {
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
} else {
simpson_index <- NA  # No 'Assigned' values equal to 1, so Simpson index is NA
}
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie separately
result <- subset %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
# Load the necessary libraries
library(dplyr)
# Define the threshold for assigning a category (e.g., 0.5)
threshold <- 0.5
# Filter rows where 'asian' is not NA
subset <- the_final_ethnicity_file %>%
filter(!is.na(asian))
# Assign individuals to race or ethnicity categories based on probabilities
subset <- subset %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Define the function to calculate the Simpson Diversity Index
calculate_simpson_diversity <- function(assigned_ethnicity_data) {
# Remove rows with NA values in assigned ethnicity columns
assigned_ethnicity_data <- assigned_ethnicity_data %>%
filter(!is.na(Assigned_Asian) & !is.na(Assigned_Black) & !is.na(Assigned_Hispanic) & !is.na(Assigned_White))
# Ensure that the assigned ethnicity columns are numeric
assigned_ethnicity_data <- assigned_ethnicity_data %>%
select(starts_with("Assigned_")) %>%  # Select the 'Assigned_' columns
mutate_at(vars(starts_with("Assigned_")), as.numeric)  # Convert selected columns to numeric
# Check if all selected columns are numeric
if (all(sapply(assigned_ethnicity_data, is.numeric))) {
# Check if there are any rows with at least one 'Assigned' variable equal to 1
has_assigned_values <- any(rowSums(assigned_ethnicity_data) > 0)
# Calculate the Simpson Diversity Index only if there are rows with 'Assigned' values equal to 1
if (has_assigned_values) {
p <- colSums(assigned_ethnicity_data) / nrow(assigned_ethnicity_data)
simpson_index <- 1 - sum(p^2)
} else {
simpson_index <- NA  # No 'Assigned' values equal to 1, so Simpson index is NA
}
} else {
simpson_index <- NA  # Not all columns are numeric, so Simpson index is NA
}
return(simpson_index)
}
# Apply the function to calculate the Simpson Diversity Index for each movie separately
result <- subset %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = calculate_simpson_diversity(.))
colnames(subset)
class(subset$Movie ID)
class(subset$'Movie ID')
unique(subset$`Movie ID`)
sum(is.na(subset$'Movie ID'))
result <- subset %>%
group_by(`Movie ID`) %>%
summarize(Simpson_Diversity_Index = mean(Assigned_Asian))
View(result)
# Assign individuals to race or ethnicity categories based on probabilities
subset <- subset %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
# Filter rows where 'asian' is not NA
subset <- the_final_ethnicity_file %>%
filter(!is.na(asian))
# Assign individuals to race or ethnicity categories based on probabilities
subset <- subset %>%
mutate(
Assigned_Asian = ifelse(asian >= threshold, 1, 0),
Assigned_Black = ifelse(black >= threshold, 1, 0),
Assigned_Hispanic = ifelse(hispanic >= threshold, 1, 0),
Assigned_White = ifelse(white >= threshold, 1, 0)
)
View(master_cleaned)
