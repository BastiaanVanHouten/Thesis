) %>%
select(-Black.05, -Hispanic.05, -White.05, -Asian.05)
# Replace all non-NA values in the ethnicity columns with 1 and NA with 0
df <- df %>%
mutate(
Black = ifelse(!is.na(Black), 1, 0),
White = ifelse(!is.na(White), 1, 0),
Asian = ifelse(!is.na(Asian), 1, 0),
Hispanic = ifelse(!is.na(Hispanic), 1, 0)
)
# Replace all non-NA values in the ethnicity columns with 1 and NA with 0
named_characters <- named_characters %>%
mutate(
Black = ifelse(!is.na(Black), 1, 0),
White = ifelse(!is.na(White), 1, 0),
Asian = ifelse(!is.na(Asian), 1, 0),
Hispanic = ifelse(!is.na(Hispanic), 1, 0)
)
subset_movies_named <- named_characters %>%
group_by(`Movie.ID`) %>%
summarize(
Total_Assigned_Asian = sum(Asian),
Total_Assigned_Black = sum(Black),
Total_Assigned_Hispanic = sum(Hispanic),
Total_Assigned_White = sum(White)
)
subset_movies_named <- named_characters %>%
group_by(Movie.ID) %>%
summarize(
Total_Assigned_Asian = sum(Asian, na.rm = TRUE),
Total_Assigned_Black = sum(Black, na.rm = TRUE),
Total_Assigned_Hispanic = sum(Hispanic, na.rm = TRUE),
Total_Assigned_White = sum(White, na.rm = TRUE)
)
subset_movies_named <- named_characters %>%
group_by(Movie.ID) %>%
dplyr::summarize(
Total_Assigned_Asian = sum(Asian, na.rm = TRUE),
Total_Assigned_Black = sum(Black, na.rm = TRUE),
Total_Assigned_Hispanic = sum(Hispanic, na.rm = TRUE),
Total_Assigned_White = sum(White, na.rm = TRUE)
)
View(subset_movies_named)
subset_movies_named  <- subset_movies_named  %>%
mutate(total_people = Total_Assigned_Asian + Total_Assigned_Black + Total_Assigned_Hispanic +  Total_Assigned_White)
subset_movies_simpson_named  <- subset_movies_named %>%
mutate(n_one_asian = (Total_Assigned_Asian - 1) * Total_Assigned_Asian,
n_one_black = (Total_Assigned_Black - 1) * Total_Assigned_Black,
n_one_hisp = (Total_Assigned_Hispanic - 1) * Total_Assigned_Hispanic,
n_one_white = (Total_Assigned_White - 1) * Total_Assigned_White)
subset_movies_simpson_named <-subset_movies_simpson_named%>%
filter(total_people != 1)
subset_movies_simpson_named  <- subset_movies_simpson_named  %>%
mutate(D = (n_one_asian + n_one_black +  n_one_hisp + n_one_white) /  (total_people * ( total_people - 1 )))
subset_movies_simpson_named <- subset_movies_simpson_named %>%
mutate(simpson_index = 1 - D)
write.csv(subset_movies_simpson_named, "../../../gen/data-preparation/output/movies_simpson_named.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(tidyverse)
movies_with_air_condition <- read_csv("../../data/AIR_analysis/movies_with_air_condition.csv")
df <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos_endgame.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
named_characters <- read_csv("../../data/AIR_analysis/filtered_named_characters.csv")
thanos <- read_csv("../../gen/data-preparation/output/thanos_endgame.csv")
named_air_condit <- read_csv("../../gen/movies_with_air_condition_named.csv")
movies_simpson_named <- read_csv("../../gen/data-preparation/output/movies_simpson_named.csv")
df <- subset(df, imdb.com_imdbid %in% named_air_condit$tt_number)
movies_simpson_named <- subset(movies_simpson_named, Movie.ID %in% named_air_condit$tt_number)
# Assuming your data frame is named 'movies_with_air_condition'
# filter df first to see if the movie was actually able to be analysed.
# Define the ethnicities and counts for t1
ethnicities <- c("Black", "Asian", "Hispanic")
t1_counts <- c(
sum(df$Total_Assigned_Black >= 2, na.rm = TRUE),
sum(df$Total_Assigned_Asian >= 2, na.rm = TRUE),
sum(df$Total_Assigned_Hispanic >= 2, na.rm = TRUE)
)
# Adding the named file
# Define the ethnicities and counts for t1 (for the named dataset)
t1_count_named <- c(
sum(movies_simpson_named$Total_Assigned_Black >= 2, na.rm = TRUE),
sum(movies_simpson_named$Total_Assigned_Asian >= 2, na.rm = TRUE),
sum(movies_simpson_named$Total_Assigned_Hispanic >= 2, na.rm = TRUE)
)
# filter df first to see if the movie was actually able to be analyzed
df_filtered <- df %>%
filter(imdb.com_imdbid %in% movies_with_air_condition$tt_number)
# Define the ethnicities and counts for t1 (for the filtered dataset)
t1_counts_filtered <- c(
sum(df_filtered$Total_Assigned_Black >= 2, na.rm = TRUE),
sum(df_filtered$Total_Assigned_Asian >= 2, na.rm = TRUE),
sum(df_filtered$Total_Assigned_Hispanic >= 2, na.rm = TRUE)
)
#Initialize an empty data frame to store the results
result_df <- data.frame(Ethnicity = character(0), T1_Count_Named = numeric(0), T1_Count_All = numeric(0), T2_Count = numeric(0), T2_Count_named = numeric(0), T3_Count = numeric(0), T3_Count_named = numeric(0))
# Loop through each ethnicity
for (i in 1:length(ethnicities)) {
ethnicity <- ethnicities[i]
t1_count_named_ethnicity <- t1_count_named[i]
t1_count_ethnicity <- t1_counts[i]
t2_count <- sum(movies_with_air_condition[[paste0(ethnicity, "_condition_with_white_t2")]] == 1)
t3_count <- sum(movies_with_air_condition[[paste0(ethnicity, "_condition_t3")]] == 1)
t2_count_named <- sum(named_air_condit[[paste0(ethnicity, "_condition_with_white_t2")]] == 1)
t3_count_named <- sum(named_air_condit[[paste0(ethnicity, "_condition_t3")]] == 1)
# Add the counts to the result data frame
result_df <- rbind(result_df, data.frame(Ethnicity = ethnicity, T1_Count_All = t1_count_ethnicity, T1_Count_Named = t1_count_named_ethnicity, T2_Count = t2_count, T2_Count_named = t2_count_named, T3_Count = t3_count, T3_Count_named = t3_count_named))
}
print(result_df)
thanos_endgame <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos_endgame.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
thanos_endgame <- left_join(thanos_endgame, named_air_condit, by = c("imdb.com_imdbid" = "tt_number"))
write.csv(thanos_endgame, "~/Master/Thesis/gen/data-preparation/output/thanos_endgame.csv")
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
library(MASS)
library(stargazer)
library(tinytex)
library(lubridate)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(memisc)
library(apaTables)
library(knitr)
library(kableExtra)
library(Hmisc)
library(mlogit)
df <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos_endgame.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
thanos <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
df <- df %>%
dplyr::select(-"imdb.com_releasedate")
#Left join thanos$imdb.com_releasedate to df
df <- df %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("imdb.com_imdbid" = "imdb.com_imdbid"))
df_clean <- df %>%
filter(imdb.com_year >= 2000)
# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$imdb.com_remake <- ifelse(is.na(df_clean$imdb.com_remake), 0, df_clean$imdb.com_remake)
df_clean$simpson_index <- ifelse(is.na(df_clean$simpson_index), 0, df_clean$simpson_index)
df_clean$boxofficemojo.com_openingtheaters <- ifelse(is.na(df_clean$boxofficemojo.com_openingtheaters), 0, df_clean$boxofficemojo.com_openingtheaters)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
df_clean$Metascore <- ifelse(is.na(df_clean$Metascore), 0, df_clean$Metascore)
df_clean$Total_Star_Power <- ifelse(is.na(df_clean$Total_Star_Power), 0 , df_clean$Total_Star_Power)
# Apply log transformation with small_constant
small_constant <- 1e-1  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake + small_constant)
df_clean$log_simpson_index <- log(df_clean$simpson_index + small_constant)
df_clean$log_op_theater <- log(df_clean$boxofficemojo.com_openingtheaters + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power + small_constant)
df_clean$log_MPAA <- log(df_clean$mpaa_numeric + small_constant)
df_clean$log_sequel <- log(df_clean$imdb.com_sequel + small_constant)
# Seasonality
# Create a new column for each season
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
df_clean_AIR <- df_clean[complete.cases(df_clean$Hispanic_condition_with_white_t2), ]
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
library(MASS)
library(stargazer)
library(tinytex)
library(lubridate)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(memisc)
library(apaTables)
library(knitr)
library(kableExtra)
library(Hmisc)
library(mlogit)
df <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos_endgame.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
thanos <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
df <- df %>%
dplyr::select(-"imdb.com_releasedate")
#Left join thanos$imdb.com_releasedate to df
df <- df %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("imdb.com_imdbid" = "imdb.com_imdbid"))
df_clean <- df %>%
filter(imdb.com_year >= 2000)
# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$imdb.com_remake <- ifelse(is.na(df_clean$imdb.com_remake), 0, df_clean$imdb.com_remake)
df_clean$simpson_index <- ifelse(is.na(df_clean$simpson_index), 0, df_clean$simpson_index)
df_clean$boxofficemojo.com_openingtheaters <- ifelse(is.na(df_clean$boxofficemojo.com_openingtheaters), 0, df_clean$boxofficemojo.com_openingtheaters)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
df_clean$Metascore <- ifelse(is.na(df_clean$Metascore), 0, df_clean$Metascore)
df_clean$Total_Star_Power <- ifelse(is.na(df_clean$Total_Star_Power), 0 , df_clean$Total_Star_Power)
# Apply log transformation with small_constant
small_constant <- 1e-1  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake + small_constant)
df_clean$log_simpson_index <- log(df_clean$simpson_index + small_constant)
df_clean$log_op_theater <- log(df_clean$boxofficemojo.com_openingtheaters + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power + small_constant)
df_clean$log_MPAA <- log(df_clean$mpaa_numeric + small_constant)
df_clean$log_sequel <- log(df_clean$imdb.com_sequel + small_constant)
# Seasonality
# Create a new column for each season
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
df_clean_AIR <- df_clean[complete.cases(df_clean$Hispanic_condition_with_white_t2), ]
# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$imdb.com_remake <- ifelse(is.na(df_clean$imdb.com_remake), 0, df_clean$imdb.com_remake)
df_clean$simpson_index <- ifelse(is.na(df_clean$simpson_index), 0, df_clean$simpson_index)
df_clean$boxofficemojo.com_openingtheaters <- ifelse(is.na(df_clean$boxofficemojo.com_openingtheaters), 0, df_clean$boxofficemojo.com_openingtheaters)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
df_clean$Metascore <- ifelse(is.na(df_clean$Metascore), 0, df_clean$Metascore)
df_clean$Total_Star_Power <- ifelse(is.na(df_clean$Total_Star_Power), 0 , df_clean$Total_Star_Power)
# Apply log transformation with small_constant
small_constant <- 1e-1  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake + small_constant)
df_clean$log_simpson_index <- log(df_clean$simpson_index + small_constant)
df_clean$log_op_theater <- log(df_clean$boxofficemojo.com_openingtheaters + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power + small_constant)
df_clean$log_MPAA <- log(df_clean$mpaa_numeric + small_constant)
df_clean$log_sequel <- log(df_clean$imdb.com_sequel + small_constant)
# Seasonality
# Create a new column for each season
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
View(df_clean)
# Load the necessary libraries
library(dplyr)
library(lubridate)
library(readr)
movie_ranks <- read.csv("../../../gen/data-preparation/output/movie_ranks.csv")
thanos <- read.csv("../../../gen/data-preparation/output/thanos.csv")
# Assuming 'Date' is a character or another class
movie_ranks$Date <- as.Date(movie_ranks$Date)
# Assuming 'thanos' is your data frame and 'imdb.com_releasedate' is the column containing the date in the format "24-Jul-19"
# Convert to Date object in the original format
thanos$imdb.com_releasedate <- as.Date(thanos$imdb.com_releasedate, format = "%d-%b-%y")
# Format the Date object to the desired format
thanos$imdb.com_releasedate <- format(thanos$imdb.com_releasedate, "%Y-%d-%m")
write.csv(thanos, "../../../gen/data-preparation/output/thanos.csv")
result <- movie_ranks %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("Movie_ID" = "imdb.com_imdbid"))
result <- result %>%
mutate(Date = as.Date(Date),
imdb.com_releasedate = as.Date(imdb.com_releasedate, format = "%Y-%d-%m"))
# Define a time window (e.g., a week)
time_window <- 4  # Number of days
# Calculate the third-year date and one-year date from release_date
result <- result %>%
mutate(
third_year_date = imdb.com_releasedate %m+% years(3),
one_year_date = imdb.com_releasedate %m+% years(1)
)
# Filter rows where imdb.com_releasedate falls within the time window of Date
releasedate_ranks <- result %>%
filter(abs(imdb.com_releasedate - Date) <= time_window)
#Remove duplicates
releasedate_ranks <- releasedate_ranks %>%
distinct()
# Calculate the average rank for each movie over a one-year period within the third year
result_third_year <- result %>%
group_by(Movie_ID) %>%
arrange(Date) %>%
filter(Date >= third_year_date, Date <= third_year_date + years(1)) %>%
summarize(Avg_Rank_Third_Year = mean(Rank, na.rm = TRUE))
# List of all the loaded package names
package_list <- c(
"interactions", "readr", "dplyr", "broom", "ggplot2",
"ggpubr", "car", "MASS", "stargazer", "tinytex",
"lubridate", "sjPlot", "sjmisc", "sjlabelled",
"memisc", "apaTables", "knitr", "kableExtra",
"Hmisc", "mlogit"
)
# Detach all the loaded packages
for (package_name in package_list) {
if (package_name %in% installed.packages()) {
detach(package_name, unload = TRUE)
}
}
# List of all the loaded package names
package_list <- c(
"interactions", "readr", "dplyr", "broom", "ggplot2",
"ggpubr", "car", "MASS", "stargazer", "tinytex",
"lubridate", "sjPlot", "sjmisc", "sjlabelled",
"memisc", "apaTables", "knitr", "kableExtra",
"Hmisc", "mlogit"
)
# Detach all the loaded packages
for (package_name in package_list) {
if (package_name %in% installed.packages()) {
detach(package_name, unload = TRUE)
}
}
# Detach all the loaded packages
for (package_name in package_list) {
if (package_name %in% installed.packages()) {
detach(package_name, unload = TRUE)
}
}
# Detach all the loaded packages
for (package_name in package_list) {
if (package_name %in% search()) {
detach(package_name, unload = TRUE)
}
}
# Detach all the loaded packages
for (package_name in package_list) {
if (package_name %in% search()) {
detach(package_name, unload = TRUE)
}
}
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(car)
library(stargazer)
library(lubridate)
library(kableExtra)
library(corrplot)
# Load the necessary libraries
library(dplyr)
library(lubridate)
library(readr)
movie_ranks <- read.csv("../../../gen/data-preparation/output/movie_ranks.csv")
thanos <- read.csv("../../../gen/data-preparation/output/thanos.csv")
# Assuming 'Date' is a character or another class
movie_ranks$Date <- as.Date(movie_ranks$Date)
# Assuming 'thanos' is your data frame and 'imdb.com_releasedate' is the column containing the date in the format "24-Jul-19"
# Convert to Date object in the original format
thanos$imdb.com_releasedate <- as.Date(thanos$imdb.com_releasedate, format = "%d-%b-%y")
# Format the Date object to the desired format
thanos$imdb.com_releasedate <- format(thanos$imdb.com_releasedate, "%Y-%d-%m")
write.csv(thanos, "../../../gen/data-preparation/output/thanos.csv")
result <- movie_ranks %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("Movie_ID" = "imdb.com_imdbid"))
result <- result %>%
mutate(Date = as.Date(Date),
imdb.com_releasedate = as.Date(imdb.com_releasedate, format = "%Y-%d-%m"))
# Define a time window (e.g., a week)
time_window <- 4  # Number of days
# Calculate the third-year date and one-year date from release_date
result <- result %>%
mutate(
third_year_date = imdb.com_releasedate %m+% years(3),
one_year_date = imdb.com_releasedate %m+% years(1)
)
# Filter rows where imdb.com_releasedate falls within the time window of Date
releasedate_ranks <- result %>%
filter(abs(imdb.com_releasedate - Date) <= time_window)
#Remove duplicates
releasedate_ranks <- releasedate_ranks %>%
distinct()
# Calculate the average rank for each movie over a one-year period within the third year
result_third_year <- result %>%
group_by(Movie_ID) %>%
arrange(Date) %>%
filter(Date >= third_year_date, Date <= third_year_date + years(1)) %>%
summarize(Avg_Rank_Third_Year = mean(Rank, na.rm = TRUE))
if ("interactions" %in% search()) detach("package:interactions", unload = TRUE)
if ("readr" %in% search()) detach("package:readr", unload = TRUE)
if ("dplyr" %in% search()) detach("package:dplyr", unload = TRUE)
if ("broom" %in% search()) detach("package:broom", unload = TRUE)
if ("ggplot2" %in% search()) detach("package:ggplot2", unload = TRUE)
if ("ggpubr" %in% search()) detach("package:ggpubr", unload = TRUE)
if ("car" %in% search()) detach("package:car", unload = TRUE)
if ("MASS" %in% search()) detach("package:MASS", unload = TRUE)
if ("stargazer" %in% search()) detach("package:stargazer", unload = TRUE)
if ("tinytex" %in% search()) detach("package:tinytex", unload = TRUE)
if ("lubridate" %in% search()) detach("package:lubridate", unload = TRUE)
if ("sjPlot" %in% search()) detach("package:sjPlot", unload = TRUE)
if ("sjmisc" %in% search()) detach("package:sjmisc", unload = TRUE)
if ("sjlabelled" %in% search()) detach("package:sjlabelled", unload = TRUE)
if ("memisc" %in% search()) detach("package:memisc", unload = TRUE)
if ("apaTables" %in% search()) detach("package:apaTables", unload = TRUE)
if ("knitr" %in% search()) detach("package:knitr", unload = TRUE)
if ("kableExtra" %in% search()) detach("package:kableExtra", unload = TRUE)
if ("Hmisc" %in% search()) detach("package:Hmisc", unload = TRUE)
if ("mlogit" %in% search()) detach("package:mlogit", unload = TRUE)
# Load the necessary libraries
library(dplyr)
library(lubridate)
library(readr)
movie_ranks <- read.csv("../../../gen/data-preparation/output/movie_ranks.csv")
thanos <- read.csv("../../../gen/data-preparation/output/thanos.csv")
# Assuming 'Date' is a character or another class
movie_ranks$Date <- as.Date(movie_ranks$Date)
# Assuming 'thanos' is your data frame and 'imdb.com_releasedate' is the column containing the date in the format "24-Jul-19"
# Convert to Date object in the original format
thanos$imdb.com_releasedate <- as.Date(thanos$imdb.com_releasedate, format = "%d-%b-%y")
# Format the Date object to the desired format
thanos$imdb.com_releasedate <- format(thanos$imdb.com_releasedate, "%Y-%d-%m")
write.csv(thanos, "../../../gen/data-preparation/output/thanos.csv")
result <- movie_ranks %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("Movie_ID" = "imdb.com_imdbid"))
result <- result %>%
mutate(Date = as.Date(Date),
imdb.com_releasedate = as.Date(imdb.com_releasedate, format = "%Y-%d-%m"))
# Define a time window (e.g., a week)
time_window <- 4  # Number of days
# Calculate the third-year date and one-year date from release_date
result <- result %>%
mutate(
third_year_date = imdb.com_releasedate %m+% years(3),
one_year_date = imdb.com_releasedate %m+% years(1)
)
# Filter rows where imdb.com_releasedate falls within the time window of Date
releasedate_ranks <- result %>%
filter(abs(imdb.com_releasedate - Date) <= time_window)
#Remove duplicates
releasedate_ranks <- releasedate_ranks %>%
distinct()
# Calculate the average rank for each movie over a one-year period within the third year
result_third_year <- result %>%
group_by(Movie_ID) %>%
arrange(Date) %>%
filter(Date >= third_year_date, Date <= third_year_date + years(1)) %>%
summarize(Avg_Rank_Third_Year = mean(Rank, na.rm = TRUE))
detach("package:MASS", unload = TRUE)
detach("package:memisc", unload = TRUE)
detach("package:MASS", unload = TRUE)
unloadAllPackages <- function() {
loadedPackages <- search()$`Autoloads`  # Get list of loaded packages
for (pkg in loadedPackages) {
if (grepl("package:", pkg)) {
pkg_name <- sub("package:", "", pkg)
detach(pkg_name, unload = TRUE, character.only = TRUE)
}
}
}
# Call the function to unload all loaded packages
unloadAllPackages()
unloadAllPackages <- function() {
loadedPackages <- search()[[3]]  # Get list of loaded packages
for (pkg in loadedPackages) {
if (grepl("package:", pkg)) {
pkg_name <- sub("package:", "", pkg)
detach(pkg_name, unload = TRUE, character.only = TRUE)
}
}
}
# Call the function to unload all loaded packages
unloadAllPackages()
# Unload 'sjstats', 'lme4', and 'mlogit' first
detach("package:sjstats", unload = TRUE)
# Unload 'sjstats', 'lme4', and 'mlogit' first
detach("package:sjstats", unload = TRUE)
# Unload 'sjstats', 'lme4', and 'mlogit' first
detach("package:sjstats", unload = TRUE)
detach("package:lme4", unload = TRUE)
detach("package:mlogit", unload = TRUE)
# Now try to detach 'MASS' after unloading its dependent packages
detach("package:MASS", unload = TRUE)
