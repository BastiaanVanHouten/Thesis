# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
# Apply log transformation with small_constant
small_constant <- 1  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee  + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake * 100 + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank * 100  + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power * 100 + small_constant)
df_clean$log_MPAA <- log(df_clean$mpaa_numeric + small_constant)
df_clean$log_sequel <- log(df_clean$imdb.com_sequel + small_constant)
# Seasonality
# Create a new column for each season
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
df_clean_AIR <- df_clean[complete.cases(df_clean$Hispanic_condition_t2), ]
# Convert the dependent variables to factor variables
df_clean_AIR$Hispanic_condition_t3 <- factor(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- factor(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- factor(df_clean_AIR$Asian_condition_t3)
model_columns <- c(
"simpson_index", "Hispanic_condition_t3", "Black_condition_t3", "Asian_condition_t3",
"screens", "log_imdb.com_runtime", "log_mpaa_numeric",
"average_budget", "imdb.com_sequel", "imdb.com_spinoff", "log_remake",
"imdb.com_basedonbook", "imdb.com_basedonplay",
"imdb.com_basedoncomicbook", "imdb.com_basedonnovel", "imdb.com_basedonshortstory",
"log_Nominee", "log_Winner", "log_dir_power", "log_metascore", "log_starpower",
"Action", "Adventure", "Comedy", "Fantasy", "Crime", "Drama", "Mystery", "Thriller",
"Romance", "Sci.Fi", "Biography", "Sport", "War", "Family", "Musical", "History",
"Horror", "Music", "Documentary", "Western",
"Spring", "Summer", "Fall", "Winter",
"2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010",
"2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "Avg_Rank_Third_Year", "rank_release", "boxofficemojo.com_openinggross"
)
# Selecting relevant columns
selected_columns <- c("imdb.com_metascore", "imdb.com_sequel", "Avg_Rank_First_Year", "rank_release", "Avg_Rank_Third_Year", "rank_two_weeks_before_release", "boxofficemojo.com_openinggross")
# Convert specific columns to numeric
df_clean_AIR$Hispanic_condition_t3 <- as.numeric(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- as.numeric(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- as.numeric(df_clean_AIR$Asian_condition_t3)
df_clean_AIR$Budget <- as.numeric(df_clean_AIR$average_budget)
df_clean_AIR$screens <- as.numeric(df_clean_AIR$boxofficemojo.com_openingtheaters)
df_clean_AIR$boxofficemojo.com_openinggross <- as.numeric(df_clean_AIR$boxofficemojo.com_openinggross)
# Subtract 1 from each value in the specified columns
df_clean_AIR$Hispanic_condition_t3 <- df_clean_AIR$Hispanic_condition_t3 - 1
df_clean_AIR$Black_condition_t3 <- df_clean_AIR$Black_condition_t3 - 1
df_clean_AIR$Asian_condition_t3 <- df_clean_AIR$Asian_condition_t3 - 1
# Filter out rows with missing values in the selected columns
df_clean_AIR_no_missing <- df_clean_AIR[complete.cases(df_clean_AIR[, selected_columns]), ]
# Select only the numeric variables from df_clean_AIR
numeric_data <- df_clean_AIR_no_missing[, sapply(df_clean_AIR_no_missing, is.numeric)]
# Filter numeric_data for columns used in the model
numeric_data <- numeric_data[, names(numeric_data) %in% model_columns]
# Compute the correlation matrix
correlation_matrix <- cor(numeric_data)
# Convert the correlation matrix to a data frame
correlation_df <- as.data.frame(correlation_matrix)
# Write the correlation matrix data frame to an Excel file
write.xlsx(correlation_df, "correlation_matrix.xlsx", asTable = TRUE)
# Define the threshold for high collinearity
threshold <- 0.5
View(correlation_df)
# load packages
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(car)
library(stargazer)
library(lubridate)
library(kableExtra)
library(corrplot)
library(openxlsx)
library(tidyr)
library(lmtest)
df <- read_csv("../../gen/data-preparation/output/thanos_endgame_air.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
thanos <- read_csv("../../gen/data-preparation/output/thanos.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
df <- df %>%
dplyr::select(-"imdb.com_releasedate")
#Left join thanos$imdb.com_releasedate to df
df <- df %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("imdb.com_imdbid" = "imdb.com_imdbid"))
df_clean <- df %>%
filter(imdb.com_year >= 2000)
# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
# Apply log transformation with small_constant
small_constant <- 1  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee  + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake * 100 + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank * 100  + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power * 100 + small_constant)
df_clean$log_MPAA <- log(df_clean$mpaa_numeric + small_constant)
df_clean$log_sequel <- log(df_clean$imdb.com_sequel + small_constant)
# Seasonality
# Create a new column for each season
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
df_clean_AIR <- df_clean[complete.cases(df_clean$Hispanic_condition_t2), ]
# Convert the dependent variables to factor variables
df_clean_AIR$Hispanic_condition_t3 <- factor(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- factor(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- factor(df_clean_AIR$Asian_condition_t3)
model_columns <- c(
"simpson_index", "Hispanic_condition_t3", "Black_condition_t3", "Asian_condition_t3",
"screens", "log_imdb.com_runtime", "log_mpaa_numeric",
"average_budget", "imdb.com_sequel", "imdb.com_spinoff", "log_remake",
"imdb.com_basedonbook", "imdb.com_basedonplay",
"imdb.com_basedoncomicbook", "imdb.com_basedonnovel", "imdb.com_basedonshortstory",
"log_Nominee", "log_Winner", "log_dir_power", "log_metascore", "log_starpower",
"Action", "Adventure", "Comedy", "Fantasy", "Crime", "Drama", "Mystery", "Thriller",
"Romance", "Sci.Fi", "Biography", "Sport", "War", "Family", "Musical", "History",
"Horror", "Music", "Documentary", "Western",
"Spring", "Summer", "Fall", "Winter",
"2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010",
"2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "Avg_Rank_Third_Year", "rank_release", "boxofficemojo.com_openinggross"
)
# Convert specific columns to numeric
df_clean_AIR$Hispanic_condition_t3 <- as.numeric(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- as.numeric(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- as.numeric(df_clean_AIR$Asian_condition_t3)
df_clean_AIR$Budget <- as.numeric(df_clean_AIR$average_budget)
df_clean_AIR$screens <- as.numeric(df_clean_AIR$boxofficemojo.com_openingtheaters)
df_clean_AIR$boxofficemojo.com_openinggross <- as.numeric(df_clean_AIR$boxofficemojo.com_openinggross)
# Subtract 1 from each value in the specified columns
df_clean_AIR$Hispanic_condition_t3 <- df_clean_AIR$Hispanic_condition_t3 - 1
df_clean_AIR$Black_condition_t3 <- df_clean_AIR$Black_condition_t3 - 1
df_clean_AIR$Asian_condition_t3 <- df_clean_AIR$Asian_condition_t3 - 1
# Selecting relevant columns
selected_columns <- c("imdb.com_metascore", "imdb.com_sequel", "Avg_Rank_First_Year", "rank_release", "Avg_Rank_Third_Year", "rank_two_weeks_before_release", "boxofficemojo.com_openinggross")
# Filter out rows with missing values in the selected columns
df_clean_AIR_no_missing <- df_clean_AIR[complete.cases(df_clean_AIR[, selected_columns]), ]
# Select only the numeric variables from df_clean_AIR
numeric_data <- df_clean_AIR_no_missing[, sapply(df_clean_AIR_no_missing, is.numeric)]
# Filter numeric_data for columns used in the model
numeric_data <- numeric_data[, names(numeric_data) %in% model_columns]
# Compute the correlation matrix
correlation_matrix <- cor(numeric_data)
# Convert the correlation matrix to a data frame
correlation_df <- as.data.frame(correlation_matrix)
# Write the correlation matrix data frame to an Excel file
write.xlsx(correlation_df, "correlation_matrix.xlsx", asTable = TRUE)
# Define the threshold for high collinearity
threshold <- 0.5
model_columns <- c(
"simpson_index", "Hispanic_condition_t3", "Black_condition_t3", "Asian_condition_t3",
"screens", "log_imdb.com_runtime", "log_mpaa_numeric",
"average_budget", "imdb.com_sequel", "imdb.com_spinoff", "log_remake",
"imdb.com_basedonbook", "imdb.com_basedonplay",
"imdb.com_basedoncomicbook", "imdb.com_basedonnovel", "imdb.com_basedonshortstory",
"log_Nominee", "log_Winner", "log_dir_power", "log_metascore", "log_starpower",
"Action", "Adventure", "Comedy", "Fantasy", "Crime", "Drama", "Mystery", "Thriller",
"Romance", "Sci.Fi", "Biography", "Sport", "War", "Family", "Musical", "History",
"Horror", "Music", "Documentary", "Western",
"Spring", "Summer", "Fall", "Winter",
"2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010",
"2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "Avg_Rank_Third_Year", "rank_release", "boxofficemojo.com_openinggross"
)
# Convert specific columns to numeric
df_clean_AIR$Hispanic_condition_t3 <- as.numeric(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- as.numeric(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- as.numeric(df_clean_AIR$Asian_condition_t3)
df_clean_AIR$Budget <- as.numeric(df_clean_AIR$average_budget)
df_clean_AIR$screens <- as.numeric(df_clean_AIR$boxofficemojo.com_openingtheaters)
df_clean_AIR$boxofficemojo.com_openinggross <- as.numeric(df_clean_AIR$boxofficemojo.com_openinggross)
# Subtract 1 from each value in the specified columns
df_clean_AIR$Hispanic_condition_t3 <- df_clean_AIR$Hispanic_condition_t3 - 1
df_clean_AIR$Black_condition_t3 <- df_clean_AIR$Black_condition_t3 - 1
df_clean_AIR$Asian_condition_t3 <- df_clean_AIR$Asian_condition_t3 - 1
# Selecting relevant columns
selected_columns <- c("imdb.com_metascore", "imdb.com_sequel", "Avg_Rank_First_Year", "rank_release", "Avg_Rank_Third_Year", "rank_two_weeks_before_release")
# Filter out rows with missing values in the selected columns
df_clean_AIR_no_missing <- df_clean_AIR[complete.cases(df_clean_AIR[, selected_columns]), ]
# Select only the numeric variables from df_clean_AIR
numeric_data <- df_clean_AIR_no_missing[, sapply(df_clean_AIR_no_missing, is.numeric)]
# Filter numeric_data for columns used in the model
numeric_data <- numeric_data[, names(numeric_data) %in% model_columns]
# Compute the correlation matrix
correlation_matrix <- cor(numeric_data)
# Convert the correlation matrix to a data frame
correlation_df <- as.data.frame(correlation_matrix)
# Write the correlation matrix data frame to an Excel file
write.xlsx(correlation_df, "correlation_matrix.xlsx", asTable = TRUE)
# Define the threshold for high collinearity
threshold <- 0.5
correlation_rank_openinggross <- cor(df_clean_AIR$rank_release, df_clean_AIR$boxofficemojo.com_openinggross)
print(correlation_rank_openinggross)
# Filter out rows with missing values in both columns
complete_rows <- complete.cases(df_clean_AIR$rank_release, df_clean_AIR$boxofficemojo.com_openinggross)
# Compute the correlation between the specified columns for complete rows
correlation_rank_openinggross <- cor(df_clean_AIR$rank_release[complete_rows], df_clean_AIR$boxofficemojo.com_openinggross[complete_rows])
# Print the correlation coefficient
print(correlation_rank_openinggross)
# load packages
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(car)
library(stargazer)
library(lubridate)
library(kableExtra)
library(corrplot)
library(openxlsx)
library(tidyr)
library(lmtest)
df <- read_csv("../../gen/data-preparation/output/thanos_endgame_air.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
thanos <- read_csv("../../gen/data-preparation/output/thanos.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
df <- df %>%
dplyr::select(-"imdb.com_releasedate")
#Left join thanos$imdb.com_releasedate to df
df <- df %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("imdb.com_imdbid" = "imdb.com_imdbid"))
df_clean <- df %>%
filter(imdb.com_year >= 2000)
# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
# Apply log transformation with small_constant
small_constant <- 1  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee  + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake * 100 + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank * 100  + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power * 100 + small_constant)
df_clean$log_MPAA <- log(df_clean$mpaa_numeric + small_constant)
df_clean$log_sequel <- log(df_clean$imdb.com_sequel + small_constant)
# Seasonality
# Create a new column for each season
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
df_clean_AIR <- df_clean[complete.cases(df_clean$Hispanic_condition_t2), ]
# Convert the dependent variables to factor variables
df_clean_AIR$Hispanic_condition_t3 <- factor(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- factor(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- factor(df_clean_AIR$Asian_condition_t3)
df_clean_AIR$Hispanic_condition_t3 <- as.numeric(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- as.numeric(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- as.numeric(df_clean_AIR$Asian_condition_t3)
df_clean_AIR$Budget <- as.numeric(df_clean_AIR$average_budget)
df_clean_AIR$screens <- as.numeric(df_clean_AIR$boxofficemojo.com_openingtheaters)
df_clean_AIR$boxofficemojo.com_openinggross <- as.numeric(df_clean_AIR$boxofficemojo.com_openinggross)
# Filter out rows with missing values in both columns
complete_rows <- complete.cases(df_clean_AIR$rank_release, df_clean_AIR$boxofficemojo.com_openinggross)
# Compute the correlation between the specified columns for complete rows
correlation_rank_openinggross <- cor(df_clean_AIR$rank_release[complete_rows], df_clean_AIR$boxofficemojo.com_openinggross[complete_rows])
# Print the correlation coefficient
print(correlation_rank_openinggross)
# Check unique values in both columns
print(unique(df_clean_AIR$rank_release[complete_rows]))
print(unique(df_clean_AIR$boxofficemojo.com_openinggross[complete_rows]))
model_columns <- c(
"simpson_index", "Hispanic_condition_t3", "Black_condition_t3", "Asian_condition_t3",
"screens", "log_imdb.com_runtime", "log_mpaa_numeric",
"average_budget", "imdb.com_sequel", "imdb.com_spinoff", "log_remake",
"imdb.com_basedonbook", "imdb.com_basedonplay",
"imdb.com_basedoncomicbook", "imdb.com_basedonnovel", "imdb.com_basedonshortstory",
"log_Nominee", "log_Winner", "log_dir_power", "log_metascore", "log_starpower",
"Action", "Adventure", "Comedy", "Fantasy", "Crime", "Drama", "Mystery", "Thriller",
"Romance", "Sci.Fi", "Biography", "Sport", "War", "Family", "Musical", "History",
"Horror", "Music", "Documentary", "Western",
"Spring", "Summer", "Fall", "Winter",
"2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010",
"2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "Avg_Rank_Third_Year", "rank_release", "boxofficemojo.com_openinggross"
)
# Convert specific columns to numeric
df_clean_AIR$Hispanic_condition_t3 <- as.numeric(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- as.numeric(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- as.numeric(df_clean_AIR$Asian_condition_t3)
df_clean_AIR$Budget <- as.numeric(df_clean_AIR$average_budget)
df_clean_AIR$screens <- as.numeric(df_clean_AIR$boxofficemojo.com_openingtheaters)
df_clean_AIR$boxofficemojo.com_openinggross <- as.numeric(df_clean_AIR$boxofficemojo.com_openinggross)
# Subtract 1 from each value in the specified columns
df_clean_AIR$Hispanic_condition_t3 <- df_clean_AIR$Hispanic_condition_t3 - 1
df_clean_AIR$Black_condition_t3 <- df_clean_AIR$Black_condition_t3 - 1
df_clean_AIR$Asian_condition_t3 <- df_clean_AIR$Asian_condition_t3 - 1
# Selecting relevant columns
selected_columns <- c("imdb.com_metascore", "imdb.com_sequel", "Avg_Rank_First_Year", "rank_release", "Avg_Rank_Third_Year", "rank_two_weeks_before_release")
# Filter out rows with missing values in the selected columns
df_clean_AIR_no_missing <- df_clean_AIR[complete.cases(df_clean_AIR[, selected_columns]), ]
# Select only the numeric variables from df_clean_AIR
numeric_data <- df_clean_AIR_no_missing[, sapply(df_clean_AIR_no_missing, is.numeric)]
# Filter numeric_data for columns used in the model
numeric_data <- numeric_data[, names(numeric_data) %in% model_columns]
# Compute the correlation matrix
correlation_matrix <- cor(numeric_data)
# Convert the correlation matrix to a data frame
correlation_df <- as.data.frame(correlation_matrix)
# Write the correlation matrix data frame to an Excel file
write.xlsx(correlation_df, "correlation_matrix.xlsx", asTable = TRUE)
# Define the threshold for high collinearity
threshold <- 0.5
# load packages
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(car)
library(stargazer)
library(lubridate)
library(kableExtra)
library(corrplot)
library(openxlsx)
library(tidyr)
library(lmtest)
df <- read_csv("../../gen/data-preparation/output/thanos_endgame_air.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
thanos <- read_csv("../../gen/data-preparation/output/thanos.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
df <- df %>%
dplyr::select(-"imdb.com_releasedate")
#Left join thanos$imdb.com_releasedate to df
df <- df %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("imdb.com_imdbid" = "imdb.com_imdbid"))
df_clean <- df %>%
filter(imdb.com_year >= 2000)
# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
# Apply log transformation with small_constant
small_constant <- 1  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee  + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake * 100 + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank * 100  + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power * 100 + small_constant)
df_clean$log_MPAA <- log(df_clean$mpaa_numeric + small_constant)
df_clean$log_sequel <- log(df_clean$imdb.com_sequel + small_constant)
# Seasonality
# Create a new column for each season
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
df_clean_AIR <- df_clean[complete.cases(df_clean$Hispanic_condition_t2), ]
# Convert the dependent variables to factor variables
df_clean_AIR$Hispanic_condition_t3 <- factor(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- factor(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- factor(df_clean_AIR$Asian_condition_t3)
model_columns <- c(
"simpson_index", "Hispanic_condition_t3", "Black_condition_t3", "Asian_condition_t3",
"screens", "log_imdb.com_runtime", "log_mpaa_numeric",
"average_budget", "imdb.com_sequel", "imdb.com_spinoff", "log_remake",
"imdb.com_basedonbook", "imdb.com_basedonplay",
"imdb.com_basedoncomicbook", "imdb.com_basedonnovel", "imdb.com_basedonshortstory",
"log_Nominee", "log_Winner", "log_dir_power", "log_metascore", "log_starpower",
"Action", "Adventure", "Comedy", "Fantasy", "Crime", "Drama", "Mystery", "Thriller",
"Romance", "Sci.Fi", "Biography", "Sport", "War", "Family", "Musical", "History",
"Horror", "Music", "Documentary", "Western",
"Spring", "Summer", "Fall", "Winter",
"2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010",
"2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "Avg_Rank_Third_Year", "rank_release", "boxofficemojo.com_openinggross"
)
# Convert specific columns to numeric
df_clean_AIR$Hispanic_condition_t3 <- as.numeric(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- as.numeric(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- as.numeric(df_clean_AIR$Asian_condition_t3)
df_clean_AIR$Budget <- as.numeric(df_clean_AIR$average_budget)
df_clean_AIR$screens <- as.numeric(df_clean_AIR$boxofficemojo.com_openingtheaters)
# Remove non-numeric characters and convert to numeric
df_clean_AIR$boxofficemojo.com_openinggross <- as.numeric(gsub("[^0-9.]", "", df_clean_AIR$boxofficemojo.com_openinggross))
# Subtract 1 from each value in the specified columns
df_clean_AIR$Hispanic_condition_t3 <- df_clean_AIR$Hispanic_condition_t3 - 1
df_clean_AIR$Black_condition_t3 <- df_clean_AIR$Black_condition_t3 - 1
df_clean_AIR$Asian_condition_t3 <- df_clean_AIR$Asian_condition_t3 - 1
# Selecting relevant columns
selected_columns <- c("imdb.com_metascore", "imdb.com_sequel", "Avg_Rank_First_Year", "rank_release", "Avg_Rank_Third_Year", "rank_two_weeks_before_release")
# Filter out rows with missing values in the selected columns
df_clean_AIR_no_missing <- df_clean_AIR[complete.cases(df_clean_AIR[, selected_columns]), ]
# Select only the numeric variables from df_clean_AIR
numeric_data <- df_clean_AIR_no_missing[, sapply(df_clean_AIR_no_missing, is.numeric)]
# Filter numeric_data for columns used in the model
numeric_data <- numeric_data[, names(numeric_data) %in% model_columns]
# Compute the correlation matrix
correlation_matrix <- cor(numeric_data)
# Convert the correlation matrix to a data frame
correlation_df <- as.data.frame(correlation_matrix)
# Write the correlation matrix data frame to an Excel file
write.xlsx(correlation_df, "correlation_matrix.xlsx", asTable = TRUE)
# Define the threshold for high collinearity
threshold <- 0.5
correlation_rank_openinggross <- cor(df_clean_AIR$rank_release[complete_rows], df_clean_AIR$boxofficemojo.com_openinggross[complete_rows])
print(correlation_rank_openinggross)
# Filter out rows with missing values in both columns
complete_rows <- complete.cases(df_clean_AIR$rank_release, df_clean_AIR$boxofficemojo.com_openinggross)
# Compute the correlation between the specified columns for complete rows
correlation_rank_openinggross <- cor(df_clean_AIR$rank_release[complete_rows], df_clean_AIR$boxofficemojo.com_openinggross[complete_rows])
# Print the correlation coefficient
print(correlation_rank_openinggross)
# Create the main regression model
model_path_b_t1_air <- lm(log(Avg_Rank_Third_Year) ~
hispanic_t1 +
black_t1 +
asian_t1 +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean)
summary(model_path_b_t1_air)
df_clean <- df_clean %>%
mutate(imdb.com_releasedate = as.Date(imdb.com_releasedate),
after_jan_2015 = as.numeric(imdb.com_releasedate > as.Date("2015-03-01")))
df_clean <- df_clean %>%
mutate(imdb.com_releasedate = as.Date(imdb.com_releasedate),
after_jan_2015 = as.numeric(imdb.com_releasedate > as.Date("2015-03-01")))
# Create the main regression model
model_path_b_t1_air <- lm(log(Avg_Rank_Third_Year) ~
hispanic_t1 * after_jan_2015
black_t1 * after_jan_2015
df_clean <- df_clean %>%
mutate(imdb.com_releasedate = as.Date(imdb.com_releasedate),
after_jan_2015 = as.numeric(imdb.com_releasedate > as.Date("2015-03-01")))
# Create the main regression model
model_path_b_t1_air <- lm(log(Avg_Rank_Third_Year) ~
hispanic_t1 * after_jan_2015 +
black_t1 * after_jan_2015 +
asian_t1 * after_jan_2015 +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean)
summary(model_path_b_t1_air)
