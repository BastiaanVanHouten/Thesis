Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean)
# print model
summary(model_step_b)
# Create the main regression model
model_path_b_t1_air <- lm(log(Avg_Rank_Third_Year) ~
hispanic_t1 +
black_t1 +
asian_t1 +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean_AIR)
summary(model_path_b_t1_air)
# Create the main regression model
model_path_c <- lm(log(Avg_Rank_Third_Year) ~
Hispanic_condition_t3 * simpson_index +
Black_condition_t3 * simpson_index +
Asian_condition_t3 * simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean_AIR)
# print model
summary(model_path_c)
# Create the main regression model
model_step_b_t1_AIR <- lm(log(Avg_Rank_Third_Year) ~
hispanic_t1 * after_jan_2015 +
black_t1* after_jan_2015 +
asian_t1 * after_jan_2015 +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019` ,
data = df_clean_AIR)
# print model
summary(model_step_b_t1_AIR)
View(df_clean_AIR)
View(df_clean_AIR)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# load packages
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(car)
library(stargazer)
library(lubridate)
library(kableExtra)
library(corrplot)
library(lmtest)
library(sandwich)
df <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos_endgame_air.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
thanos <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
movie_ranks <- read_csv("../../gen/data-preparation/output/movie_ranks.csv")
df <- df %>%
dplyr::select(-"imdb.com_releasedate")
#Left join thanos$imdb.com_releasedate to df
df <- df %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("imdb.com_imdbid" = "imdb.com_imdbid"))
df_clean <- df %>%
filter(imdb.com_year >= 2000)
# Convert 'Date' column to a date format
movie_ranks$Date <- as.Date(movie_ranks$Date)
# Filter the dataset for dates after 2003
movie_ranks <- movie_ranks %>%
filter(Date >= as.Date("2003-01-01"))
# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
# Apply log transformation with small_constant
small_constant <- 1  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee  + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake * 100 + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank * 100  + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power * 100 + small_constant)
df_clean$log_MPAA <- log(df_clean$mpaa_numeric + small_constant)
df_clean$log_sequel <- log(df_clean$imdb.com_sequel + small_constant)
# Seasonality
# Create a new column for each season
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
df_clean$treatment <- ifelse(df_clean$simpson_index > 0.3627456, 1, 0)
movie_ranks <- movie_ranks %>%
left_join(select(df_clean, imdb.com_imdbid, treatment),
by = c("Movie_ID" = "imdb.com_imdbid"))
# Assuming your data frame is named movie_ranks
# Filter the data into treatment and control groups
treatment_group <- movie_ranks %>%
filter(treatment == 1) %>%
group_by(Date) %>%
summarise(avg_rank = mean(Rank))
control_group <- movie_ranks %>%
filter(treatment == 0) %>%
group_by(Date) %>%
summarise(avg_rank = mean(Rank))
# Create the plot
ggplot() +
geom_line(data = treatment_group, aes(x = Date, y = avg_rank, color = "Treatment Group"), size = 1) +
geom_line(data = control_group, aes(x = Date, y = avg_rank, color = "Control Group"), size = 1) +
labs(title = "Average Ranking Over Time",
x = "Date/Year",
y = "Average Ranking") +
scale_color_manual(values = c("Treatment Group" = "gray", "Control Group" = "black")) +
theme_minimal()
movie_ranks$time_indicator <- as.integer(movie_ranks$Date >= as.Date("2016-02-01"))
model_diff <- lm(Rank ~ treatment * time_indicator, data = movie_ranks)
summary(model_diff)
df_clean_AIR <- df_clean[complete.cases(df_clean$Hispanic_condition_t2), ]
movie_ranks_AIR <- movie_ranks %>%
filter(Movie_ID %in% df_clean_AIR$imdb.com_imdbid)
movie_ranks_AIR <- movie_ranks_AIR %>%
left_join(select(df_clean_AIR, imdb.com_imdbid, Black_condition_t3, Asian_condition_t3, Hispanic_condition_t3),
by = c("Movie_ID" = "imdb.com_imdbid"))
model_diff_black <- lm(Rank ~ time_indicator * Black_condition_t3, data = movie_ranks_AIR)
model_diff_asian <- lm(Rank ~ time_indicator * Asian_condition_t3, data = movie_ranks_AIR)
model_diff_hisp<- lm(Rank ~ time_indicator * Hispanic_condition_t3, data = movie_ranks_AIR)
summary(model_diff_black)
summary(model_diff_asian)
summary(model_diff_hisp)
df_clean <- df_clean %>%
mutate(imdb.com_releasedate = as.Date(imdb.com_releasedate),
after_jan_2015 = as.numeric(imdb.com_releasedate > as.Date("2015-03-01")))
# Create the main regression model
model_step <- lm(log(Avg_Rank_Third_Year) ~
simpson_index * after_jan_2015  +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` +`2018` + `2019`
# Adding the year dummy variables to the model (excluding 2000)
,
data = df_clean)
# print model
summary(model_step)
# Create the main regression model
model_step_b <- lm(log(Avg_Rank_Third_Year) ~
Hispanic_condition_t3 * after_jan_2015 +
Black_condition_t3 * after_jan_2015 +
Asian_condition_t3 * after_jan_2015 +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean)
# print model
summary(model_step_b)
# Create the main regression model
model_step_b_t1 <- lm(log(Avg_Rank_Third_Year) ~
hispanic_t1 * after_jan_2015 +
black_t1* after_jan_2015 +
asian_t1 * after_jan_2015 +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019` ,
data = df_clean)
# print model
summary(model_step_b_t1)
# Create the main regression model
model_step_b_t2 <- lm(log(Avg_Rank_Third_Year) ~
Hispanic_condition_t2 * after_jan_2015 +
Black_condition_t2 * after_jan_2015 +
Asian_condition_t2 * after_jan_2015 +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean)
# print model
summary(model_step_b_t2)
# Get model summaries
model_summaries <- bind_rows(
glance(model_step_b) %>% mutate(model = "model_step_b"),
glance(model_step) %>% mutate(model = "model_step"),
glance(model_step_b_t1) %>% mutate(model = "model_step_b_t1"),
glance(model_step_b_t2) %>% mutate(model = "model_step_b_t2")  # Add model_step_b_t2
)
# Get model coefficients with significance
model_coefficients <- bind_rows(
tidy(model_step) %>% mutate(model = "model_step"),
tidy(model_step_b) %>% mutate(model = "model_step_b"),
tidy(model_step_b_t1) %>% mutate(model = "model_step_b_t1"),  # Add model_step_b_t1_air
tidy(model_step_b_t2) %>% mutate(model = "model_step_b_t2")  # Add model_step_b_t2
)
model_coefficients_with_stars <- model_coefficients %>%
mutate(
significance = case_when(
p.value < 0.001 ~ '***',
p.value < 0.01 ~ '**',
p.value < 0.05 ~ '*',
TRUE ~ ''  # If none of the above conditions are met
),
estimate = round(estimate, 3)  # Rounding 'estimate' to 3 decimal places
)
model_coefficients_with_stars <- model_coefficients_with_stars %>%
mutate(
combined_estimate = paste(estimate, significance, sep = " ") # Creating a new variable by concatenating 'estimate' and 'significance'
)
model_coefficients_pivot <- model_coefficients_with_stars %>%
select(-std.error, -statistic, -p.value, -estimate, -significance) %>%  # Remove unnecessary columns
spread(key = model, value = combined_estimate)
# Writing the model summaries to an Excel file
write.xlsx(model_coefficients_pivot, "../../model_coefficients_diff_diff.xlsx")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
df_clean$simpson_index <- simpson_index * 100
df_clean$simpson_index <- df_clean$simpson_index * 100
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# load packages
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(car)
library(stargazer)
library(lubridate)
library(kableExtra)
library(corrplot)
library(lmtest)
library(sandwich)
df <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos_endgame_air.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
thanos <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
df <- df %>%
dplyr::select(-"imdb.com_releasedate")
#Left join thanos$imdb.com_releasedate to df
df <- df %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("imdb.com_imdbid" = "imdb.com_imdbid"))
df_clean <- df %>%
filter(imdb.com_year >= 2000)
# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
# Apply log transformation with small_constant
small_constant <- 1  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee  + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake * 100 + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank * 100  + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power * 100 + small_constant)
df_clean$log_MPAA <- log(df_clean$mpaa_numeric + small_constant)
df_clean$log_sequel <- log(df_clean$imdb.com_sequel + small_constant)
df_clean$simpson_index <- df_clean$simpson_index * 100
# Seasonality
# Create a new column for each season
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
model_variables <- c(
"Avg_Rank_Third_Year",
"simpson_index",
"boxofficemojo.com_openingtheaters",
"imdb.com_runtime",
"log_MPAA",
"average_budget",
"log_sequel",
"imdb.com_sequel",
"imdb.com_spinoff",
"log_remake",
"imdb.com_basedonbook",
"imdb.com_basedonbookseries",
"imdb.com_basedonplay",
"imdb.com_basedoncomicbook",
"imdb.com_basedonnovel",
"imdb.com_basedonshortstory",
"log_Nominee",
"log_Winner",
"log_dir_power",
"log_metascore",
"log_starpower",
"Action",
"Adventure",
"Comedy",
"Fantasy",
"Crime",
"Drama",
"Mystery",
"Thriller",
"Romance",
"Sci.Fi",
"Biography",
"Sport",
"War",
"Family",
"Musical",
"History",
"Horror",
"Music",
"Documentary",
"Western",
"Spring",
"Summer",
"Fall",
"Winter",
"2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"
)
df_clean_subset <- df_clean[model_variables]
# Filter out rows with missing values in df_clean_subset
df_clean_subset <- df_clean_subset[complete.cases(df_clean_subset), ]
# Create the main regression model
model <- lm(log(Avg_Rank_Third_Year) ~ simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log_MPAA +
log(average_budget) +
log_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean)
# print model
summary(model)
# Create a kable object for the table data
kable_table <- kable(table_data, format = "html") %>%
kable_styling("striped", full_width = FALSE) %>%
kable_classic(full_width = FALSE)
# Print the table
cat(kable_table)
