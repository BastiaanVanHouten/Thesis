print("VIF for Black model:")
print(vif_black)
# Create the main regression model
model_path_c <- lm(log(Avg_Rank_Third_Year) ~
simpson_index +
Hispanic_condition_t3 +
Black_condition_t3 +
Asian_condition_t3 +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean_AIR)
# print model
summary(model)
# Create the main regression model
model_path_c <- lm(log(Avg_Rank_Third_Year) ~
simpson_index +
Hispanic_condition_t3 +
Black_condition_t3 +
Asian_condition_t3 +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log(mpaa_numeric) +
log(average_budget) +
imdb.com_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean_AIR)
# print model
summary(model_path_c)
# Calculate VIF for the first model
vif_c <- vif(model_path_c)
print(vif_C)
print(vif_C)
# Calculate VIF for the first model
vif_c <- vif(model_path_c)
print(vif_c)
# Calculate VIF for the first model
vif_b <- vif(model_path_c)
print(vif_b)
library(kableExtra)
install.packages("kableExtra", dependencies = TRUE)
install.packages("kableExtra", dependencies = TRUE)
library(kableExtra)
# Create a list of the three model objects
models_list <- list(
model_path_hisp,
model_path_asian,
model_path_black
)
# Define custom names for the models
model_names <- c("Hispanic", "Asian", "Black")
# Use stargazer to generate a table
table <- stargazer(
models_list,
title = "Logistic Regression Models by Ethnicity",
align = TRUE,  # Align coefficients
column.labels = model_names,  # Specify model names
dep.var.labels = c("Hispanic", "Asian", "Black"),  # Specify dependent variable labels
type = "text"  # Output the table as plain text
)
# Print the table
cat(table)
# Assuming the 'table' contains the output from stargazer
# Create a workbook
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "Logistic_Regression_Models")
# Write the table to the worksheet
writeData(wb, "Logistic_Regression_Models", table, startCol = 1, startRow = 1)
# Save the workbook to an Excel file
saveWorkbook(wb, "Logistic_Regression_Models.xlsx", overwrite = TRUE)
# Create a list of the three model objects
models_list <- list(
model_path_hisp,
model_path_asian,
model_path_black
)
# Define custom names for the models
model_names <- c("Hispanic", "Asian", "Black")
# Use stargazer to generate a table
table <- stargazer(
models_list,
title = "Logistic Regression Models by Ethnicity",
align = TRUE,  # Align coefficients
column.labels = model_names,  # Specify model names
dep.var.labels = c("Hispanic", "Asian", "Black"),  # Specify dependent variable labels
type = "text"  # Output the table as plain text
)
# Print the table
cat(table)
# Assuming the 'table' contains the output from stargazer
# Create a workbook
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "Logistic_Regression_Models")
# Write the table to the worksheet
writeData(wb, "Logistic_Regression_Models", table, startCol = 1, startRow = 1)
# Save the workbook to an Excel file
saveWorkbook(wb, "Logistic_Regression_Models.xlsx", overwrite = TRUE)
# Create a list of the three model objects
models_list <- list(
model_path_hisp,
model_path_asian,
model_path_black
)
# Define custom names for the models
model_names <- c("Hispanic", "Asian", "Black")
# Use stargazer to generate a table
table <- stargazer(
models_list,
title = "Logistic Regression Models by Ethnicity",
align = TRUE,  # Align coefficients
column.labels = model_names,  # Specify model names
dep.var.labels = c("Hispanic", "Asian", "Black"),  # Specify dependent variable labels
type = "text"  # Output the table as plain text
)
# Print the table
cat(table)
# Assuming the 'table' contains the output from stargazer
# Splitting the table values based on the newline character
table_values <- unlist(strsplit(table, "\n"))
# Create a workbook
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "Logistic_Regression_Models")
# Write the values to the worksheet
writeData(wb, "Logistic_Regression_Models", as.data.frame(table_values), startCol = 1, startRow = 1)
# Save the workbook to an Excel file
saveWorkbook(wb, "Logistic_Regression_Models.xlsx", overwrite = TRUE)
# Assuming the 'table' contains the output from stargazer
# Splitting the table values based on the newline character
table_values <- unlist(strsplit(table, "\n"))
# Create a workbook
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "Logistic_Regression_Models")
# Write the values to the worksheet
writeData(wb, "Logistic_Regression_Models", as.data.frame(table_values), startCol = 1, startRow = 1)
# Save the workbook to an Excel file
saveWorkbook(wb, "Logistic_Regression_Models.xlsx", overwrite = TRUE)
# Capture the output of the stargazer function
stargazer_output <- capture.output({
stargazer(
models_list,
title = "Logistic Regression Models by Ethnicity",
align = TRUE,  # Align coefficients
column.labels = model_names,  # Specify model names
dep.var.labels = c("Hispanic", "Asian", "Black"),  # Specify dependent variable labels
type = "text"  # Output the table as plain text
)
})
# Combine all the outputs into a single string
stargazer_output <- paste(stargazer_output, collapse = "\n")
# Write the formatted table output into an Excel file
writeLines(stargazer_output, "Logistic_Regression_Models.txt")
# Create a list of the three model objects
models_list <- list(
model_path_hisp,
model_path_asian,
model_path_black
)
# Define custom names for the models
model_names <- c("Hispanic", "Asian", "Black")
# Use stargazer to generate a table
table <- stargazer(
models_list,
title = "Logistic Regression Models by Ethnicity",
align = TRUE,  # Align coefficients
column.labels = model_names,  # Specify model names
dep.var.labels = c("Hispanic", "Asian", "Black"),  # Specify dependent variable labels
type = "text"  # Output the table as plain text
)
# Print the table
cat(table)
# Capture the output of the stargazer function
stargazer_output <- capture.output({
stargazer(
models_list,
title = "Logistic Regression Models by Ethnicity",
align = TRUE,  # Align coefficients
column.labels = model_names,  # Specify model names
dep.var.labels = c("Hispanic", "Asian", "Black"),  # Specify dependent variable labels
type = "text"  # Output the table as plain text
)
})
# Combine all the outputs into a single string
stargazer_output <- paste(stargazer_output, collapse = "\n")
# Write the formatted table output into an Excel file
writeLines(stargazer_output, "Logistic_Regression_Models.txt")
# Read the text file
data <- readLines("Logistic_Regression_Models.txt")
# Write to CSV
writeLines(data, "output.csv")
# Perform chi-square test for the three models
chi_square_hisp <- Anova(model_path_hisp, test = "Chisq")
# Perform chi-square test for the three models
chi_square_hisp <- Anova(model_path_hisp, test.statistic = "LR")
chi_square_asian <- Anova(model_path_asian, test.statistic = "LR")
chi_square_black <- Anova(model_path_black, test.statistic = "LR")
# Display the results
print(chi_square_hisp)
print(chi_square_asian)
print(chi_square_black)
# Perform chi-square test for the three models
chi_square_hisp <- Anova(model_path_hisp, test.statistic = "LR")
chi_square_asian <- Anova(model_path_asian, test.statistic = "LR")
chi_square_black <- Anova(model_path_black, test.statistic = "LR")
# Display the results
print(chi_square_hisp)
print(chi_square_asian)
print(chi_square_black)
# Fit the null model (only the intercept)
null_model_path_hisp <- glm(Hispanic_condition_t3 ~ 1, data = df_clean_AIR, family = binomial())
# Perform the Likelihood Ratio (LR) test
lr_test_hisp <- anova(null_model_path_hisp, model_path_hisp, test = "LRT")
# Define a function to calculate Nagelkerke R-squared
nagelkerke_r2 <- function(model) {
# Cox and Snell R-squared
r2_cox_snell <- 1 - exp(-summary(model)$null.deviance / summary(model)$deviance)
# Nagelkerke R-squared
r2_nagelkerke <- r2_cox_snell / (1 - exp(-summary(model)$null.deviance / nrow(df_clean_AIR)))
return(r2_nagelkerke)
}
# Calculate Nagelkerke R-squared for each model
nagelkerke_hisp <- nagelkerke_r2(model_path_hisp)
nagelkerke_asian <- nagelkerke_r2(model_path_asian)
nagelkerke_black <- nagelkerke_r2(model_path_black)
# Display Nagelkerke R-squared for each model
print(nagelkerke_hisp)
print(nagelkerke_asian)
print(nagelkerke_black)
# Perform chi-square test for the three models
anova(model_path_his, test = "Chisq")
# load packages
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(car)
library(stargazer)
library(lubridate)
library(kableExtra)
library(corrplot)
library(openxlsx)
df <- read_csv("~/Master/Thesis/gen/data-preparation/output/thanos_endgame.csv",
col_types = cols(imdb.com_releasedate = col_datetime(format = "%Y-%d-%m")))
df <- df %>%
dplyr::select(-"imdb.com_releasedate")
#Left join thanos$imdb.com_releasedate to df
df <- df %>%
left_join(thanos %>% dplyr::select(imdb.com_imdbid, imdb.com_releasedate),
by = c("imdb.com_imdbid" = "imdb.com_imdbid"))
df_clean <- df %>%
filter(imdb.com_year >= 2000)
# Create new columns for each year from 2000 to 2019
for (year in 2000:2019) {
col_name <- as.character(year)  # Convert the year to a character
df_clean[col_name] <- ifelse(df_clean$imdb.com_year == year, 1, 0)
}
df_clean$Metascore <- as.numeric(df_clean$Metascore)
# Replace NA values with zero in specific columns
df_clean$Nominee <- ifelse(is.na(df_clean$Nominee), 0, df_clean$Nominee)
df_clean$Winner <- ifelse(is.na(df_clean$Winner), 0, df_clean$Winner)
df_clean$imdb.com_remake <- ifelse(is.na(df_clean$imdb.com_remake), 0, df_clean$imdb.com_remake)
df_clean$simpson_index <- ifelse(is.na(df_clean$simpson_index), 0, df_clean$simpson_index)
df_clean$boxofficemojo.com_openingtheaters <- ifelse(is.na(df_clean$boxofficemojo.com_openingtheaters), 0, df_clean$boxofficemojo.com_openingtheaters)
df_clean$the_numbers_com_dirpower_rank <- ifelse(is.na(df_clean$the_numbers_com_dirpower_rank), 0, df_clean$the_numbers_com_dirpower_rank)
df_clean$Metascore <- ifelse(is.na(df_clean$Metascore), 0, df_clean$Metascore)
df_clean$Total_Star_Power <- ifelse(is.na(df_clean$Total_Star_Power), 0 , df_clean$Total_Star_Power)
# Apply log transformation with small_constant
small_constant <- 1  # Define your small constant value
df_clean$log_Nominee <- log(df_clean$Nominee + small_constant)
df_clean$log_Winner <- log(df_clean$Winner + small_constant)
df_clean$log_remake <- log(df_clean$imdb.com_remake + small_constant)
df_clean$log_simpson_index <- log(df_clean$simpson_index + small_constant)
df_clean$log_op_theater <- log(df_clean$boxofficemojo.com_openingtheaters + small_constant)
df_clean$log_dir_power <- log(df_clean$the_numbers_com_dirpower_rank + small_constant)
df_clean$log_metascore <- log(df_clean$Metascore + small_constant)
df_clean$log_starpower <-log(df_clean$Total_Star_Power + small_constant)
df_clean$log_MPAA <- log(df_clean$mpaa_numeric + small_constant)
df_clean$log_sequel <- log(df_clean$imdb.com_sequel + small_constant)
# Seasonality
# Create a new column for each season
df_clean$Spring <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(3, 4, 5), 1, 0)
df_clean$Summer <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(6, 7, 8), 1, 0)
df_clean$Fall <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(9, 10, 11), 1, 0)
df_clean$Winter <- ifelse(month(df_clean$imdb.com_releasedate) %in% c(12, 1, 2), 1, 0)
df_clean_AIR <- df_clean[complete.cases(df_clean$Hispanic_condition_t2), ]
# Convert the dependent variables to factor variables
df_clean_AIR$Hispanic_condition_t3 <- factor(df_clean_AIR$Hispanic_condition_t3)
df_clean_AIR$Black_condition_t3 <- factor(df_clean_AIR$Black_condition_t3)
df_clean_AIR$Asian_condition_t3 <- factor(df_clean_AIR$Asian_condition_t3)
# Fit a binary logistic regression model
model_path_hisp <- glm(
Hispanic_condition_t3 ~
simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log_MPAA +
log(average_budget) +
log_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean_AIR,
family = binomial()  # Specify the family as binomial for binary logistic regression
)
# Fit a binary logistic regression model
model_path_asian <- glm(
Asian_condition_t3 ~
simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log_MPAA +
log(average_budget) +
log_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2000`+`2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean_AIR,
family = binomial()  # Specify the family as binomial for binary logistic regression
)
# Fit a binary logistic regression model
model_path_black <- glm(
Black_condition_t3 ~
simpson_index +
log(boxofficemojo.com_openingtheaters) +
log(imdb.com_runtime) + log_MPAA +
log(average_budget) +
log_sequel +
imdb.com_spinoff +
log_remake +
imdb.com_basedonbook +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
log_Nominee +
log_Winner +
log_dir_power +
log_metascore +
log_starpower +
# Include all genre variables
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller + Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History + Horror + Music + Documentary + Western +
# including seasonality
Spring +
Summer +
Fall +
# Adding the year dummy variables to the model (excluding 2000)
`2001` + `2002` + `2003` + `2004` + `2005` + `2006` + `2007` + `2008` + `2009` + `2010` + `2011` + `2012` + `2013` + `2014` + `2015` + `2016` + `2017` + `2018` + `2019`,
data = df_clean_AIR,
family = binomial()  # Specify the family as binomial for binary logistic regression
)
# Create a list of the three model objects
models_list <- list(
model_path_hisp,
model_path_asian,
model_path_black
)
# Define custom names for the models
model_names <- c("Hispanic", "Asian", "Black")
# Use stargazer to generate a table
table <- stargazer(
models_list,
title = "Logistic Regression Models by Ethnicity",
align = TRUE,  # Align coefficients
column.labels = model_names,  # Specify model names
dep.var.labels = c("Hispanic", "Asian", "Black"),  # Specify dependent variable labels
type = "text"  # Output the table as plain text
)
# Print the table
cat(table)
# Capture the output of the stargazer function
stargazer_output <- capture.output({
stargazer(
models_list,
title = "Logistic Regression Models by Ethnicity",
align = TRUE,  # Align coefficients
column.labels = model_names,  # Specify model names
dep.var.labels = c("Hispanic", "Asian", "Black"),  # Specify dependent variable labels
type = "text"  # Output the table as plain text
)
})
# Combine all the outputs into a single string
stargazer_output <- paste(stargazer_output, collapse = "\n")
# Write the formatted table output into an Excel file
writeLines(stargazer_output, "Logistic_Regression_Models.txt")
# Read the text file
data <- readLines("Logistic_Regression_Models.txt")
# Write to CSV
writeLines(data, "output.csv")
# Calculate VIF for the first model
vif_hisp <- vif(model_path_hisp)
# Calculate VIF for the second model
vif_asian <- vif(model_path_asian)
# Calculate VIF for the third model
vif_black <- vif(model_path_black)
# Print VIF values for each model
print("VIF for Hispanic model:")
print(vif_hisp)
print("VIF for Asian model:")
print(vif_asian)
print("VIF for Black model:")
print(vif_black)
# Selecting relevant columns
selected_columns <- c("imdb.com_metascore", "imdb.com_sequel", "Avg_Rank_First_Year", "rank_release", "Avg_Rank_Third_Year", "rank_two_weeks_before_release")
# Filter out rows with missing values in the selected columns
df_clean_AIR_no_missing <- df_clean_AIR[complete.cases(df_clean_AIR[, selected_columns]), ]
# Select only the numeric variables from df_clean_AIR
numeric_data <- df_clean_AIR_no_missing[, sapply(df_clean_AIR_no_missing, is.numeric)]
model_columns <- c(
"simpson_index", "Hispanic_condition_t3", "Black_condition_t3", "Asian_condition_t3",
"log_boxofficemojo.com_openingtheaters", "log_imdb.com_runtime", "log_mpaa_numeric",
"log_average_budget", "imdb.com_sequel", "imdb.com_spinoff", "log_remake",
"imdb.com_basedonbook", "imdb.com_basedonplay", "imdb.com_basedoncomic",
"imdb.com_basedoncomicbook", "imdb.com_basedonnovel", "imdb.com_basedonshortstory",
"log_Nominee", "log_Winner", "log_dir_power", "log_metascore", "log_starpower",
"Action", "Adventure", "Comedy", "Fantasy", "Crime", "Drama", "Mystery", "Thriller",
"Romance", "Sci.Fi", "Biography", "Sport", "War", "Family", "Musical", "History",
"Horror", "Music", "Documentary", "Western",
"Spring", "Summer", "Fall", "Winter",
"2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010",
"2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "Avg_Rank_Third_Year"
)
# Filter numeric_data for columns used in the model
numeric_data <- numeric_data[, names(numeric_data) %in% model_columns]
# Compute the correlation matrix
correlation_matrix <- cor(numeric_data)
# Convert the correlation matrix to a data frame
correlation_df <- as.data.frame(correlation_matrix)
# Write the correlation matrix data frame to an Excel file
write.xlsx(correlation_df, "correlation_matrix.xlsx", asTable = TRUE)
# Perform chi-square test for the three models
anova(model_path_hisp, test = "Chisq")
anova(model_path_hisp, test = "Chisq")
chisq.test(model_path_hisp)
