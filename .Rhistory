write.csv(df, "../../../gen/data-preparation/temp/thanos_not_cleaned.csv")
library(dplyr)
thanos <- read.csv("../../../gen/data-preparation/temp/thanos_not_cleaned.csv")
# Removing the first 5 columms
thanos <- thanos %>%
select(-(1:6))
# Specify the columns to remove
columns_to_remove <- c(
"imdb.com_genres",
"actor1",
"actor2",
"actor3",
"actor4",
"imdb.com_writer",
"imdb.com_awards",
"imdb.com_type",
"Belongs.to.Collection",
"n_one_asian",
"n_one_black",
"n_one_hisp",
"n_one_white",
"the_numbers_com_starpower_rank.x",
"the_numbers_com_starpower_rank.y",
"the_numbers_com_starpower_rank.x.x",
"the_numbers_com_starpower_rank.y.y",
"imdb.com_cast_id"
)
# Remove the specified columns
thanos <- thanos %>%
select(-all_of(columns_to_remove))
write.csv(thanos, "../../../gen/data-preparation/output/thanos.csv")
# Load the necessary libraries
library(dplyr)
library(lubridate)
library(readr)
movie_ranks <- read.csv("../../../gen/data-preparation/output/movie_ranks.csv")
thanos <- read.csv("../../../gen/data-preparation/output/thanos.csv")
# Assuming 'Date' is a character or another class
movie_ranks$Date <- as.Date(movie_ranks$Date)
# Assuming 'thanos' is your data frame and 'imdb.com_releasedate' is the column containing the date in the format "24-Jul-19"
# Convert to Date object in the original format
thanos$imdb.com_releasedate <- as.Date(thanos$imdb.com_releasedate, format = "%d-%b-%y")
# Format the Date object to the desired format
thanos$imdb.com_releasedate <- format(thanos$imdb.com_releasedate, "%Y-%d-%m")
result <- movie_ranks %>%
left_join(thanos %>% select(imdb.com_imdbid, imdb.com_releasedate),
by = c("Movie_ID" = "imdb.com_imdbid"))
result <- result %>%
mutate(Date = as.Date(Date),
imdb.com_releasedate = as.Date(imdb.com_releasedate, format = "%Y-%d-%m"))
# Define a time window (e.g., a week)
time_window <- 4  # Number of days
# Calculate the third-year date and one-year date from release_date
result <- result %>%
mutate(
third_year_date = imdb.com_releasedate %m+% years(3),
one_year_date = imdb.com_releasedate %m+% years(1)
)
# Filter rows where imdb.com_releasedate falls within the time window of Date
releasedate_ranks <- result %>%
filter(abs(imdb.com_releasedate - Date) <= time_window)
#Remove duplicates
releasedate_ranks <- releasedate_ranks %>%
distinct()
# Calculate the average rank for each movie over a one-year period within the third year
result_third_year <- result %>%
group_by(Movie_ID) %>%
arrange(Date) %>%
filter(Date >= third_year_date, Date <= third_year_date + years(1)) %>%
summarize(Avg_Rank_Third_Year = mean(Rank, na.rm = TRUE))
# Calculate the average rank for each movie over a one-year period within the first year
result_first_year <- result %>%
group_by(Movie_ID) %>%
arrange(Date) %>%
filter(Date >= one_year_date, Date <= one_year_date + years(1)) %>%
summarize(Avg_Rank_First_Year = mean(Rank, na.rm = TRUE))
# Calculate rank two weeks before release date and summarize
result_two_weeks_before_release <- result %>%
group_by(Movie_ID) %>%
arrange(Date) %>%
filter(Date >= imdb.com_releasedate - weeks(2), Date <= imdb.com_releasedate - weeks(1))
releasedate_ranks <- releasedate_ranks %>%
left_join(result_first_year, by = "Movie_ID") %>%
left_join(result_third_year, by = "Movie_ID")
result_with_all_rankings <- releasedate_ranks %>%
left_join(result_two_weeks_before_release %>%
select(Movie_ID, Date_two_weeks_before = Date, rank_two_weeks_before_release = Rank),
by = "Movie_ID")
#Remove duplicates
result_with_all_rankings <- result_with_all_rankings %>%
distinct()
# Rename the Rank column to rank_release
result_with_all_rankings <- result_with_all_rankings %>%
rename(rank_release = Rank)
# Perform the left join without joining the imdb.com_releasedate column
thanos_endgame <- left_join(thanos,
result_with_all_rankings %>% select(-imdb.com_releasedate),
by = c("imdb.com_imdbid" = "Movie_ID"))
# Remove duplicates from imdb.com_imdbid column
thanos_endgame <- thanos_endgame %>%
distinct(imdb.com_imdbid, .keep_all = TRUE)
write.csv(thanos_endgame, "../../../gen/data-preparation/output/thanos_endgame.csv")
library(readr)
library(dplyr)
thanos <- read.csv("../../../gen/data-preparation/output/thanos_endgame.csv")
# Changing runtime in numeric
thanos$imdb.com_runtime <- as.numeric(gsub(" min", "", thanos$imdb.com_runtime))
thanos$mpaa_numeric <- as.numeric(factor(thanos$imdb.com_MPAArating,
levels = c("G", "PG", "PG-13", "R"),
labels = c(1, 2, 3, 4)))
thanos$imdb.com_metascore <- as.numeric(thanos$imdb.com_metascore)
write.csv(thanos, "../../../gen/data-preparation/output/thanos_endgame.csv")
thanos <- read.csv("../../gen/data-preparation/output/thanos_endgame.csv")
setwd("~/Master/Thesis/src/data-analysis")
thanos <- read.csv("../../gen/data-preparation/output/thanos_endgame.csv")
# Define the regression model
# Create the main regression model
model <- lm(Avg_Rank_Third_Year ~ simpson_index +
boxofficemojo.com_openingtheaters +
imdb.com_runtime + mpaa_numeric +
average_budget +
imdb.com_year +
imdb.com_sequel +
imdb.com_spinoff +
imdb.com_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
imdb.com_basedontvmovie +
Nominee +
Winner +
the_numbers_com_dirpower_rank +
Total_Star_Power - 1 +
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller +
Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History +
Horror + Music + Documentary + Western, # Include all genre variables
data = thanos)
# print model
summary(model)
# Create the main regression model
model <- lm(Avg_Rank_Third_Year ~ simpson_index +
boxofficemojo.com_openingtheaters +
imdb.com_runtime + mpaa_numeric +
average_budget +
imdb.com_year +
imdb.com_sequel +
imdb.com_spinoff +
imdb.com_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
imdb.com_basedontvmovie +
Nominee +
Winner +
the_numbers_com_dirpower_rank +
Total_Star_Power +
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller +
Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History +
Horror + Music + Documentary + Western, # Include all genre variables
data = thanos)
# print model
summary(model)
# Subset your data based on your criteria
subset_data <- thanos%>%
filter(imdb.com_year > 2016)
# Create the regression model with dummy variables using the subsetted data
model_after_2016 <- lm(Avg_Rank_Third_Year.y ~ simpson_index +
boxofficemojo.com_openingtheaters +
imdb.com_runtime + mpaa_numeric +
average_budget +
imdb.com_year +
imdb.com_sequel +
imdb.com_spinoff +
imdb.com_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
imdb.com_basedontvmovie +
Nominee +
Winner +
the_numbers_com_dirpower_rank +
Total_Star_Power - 1 +
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller +
Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History +
Horror + Music + Documentary + Western, # Include all genre variables
data = subset_data)
# Subset your data based on your criteria
subset_data <- thanos%>%
filter(imdb.com_year > 2016)
# Create the regression model with dummy variables using the subsetted data
model_after_2016 <- lm(Avg_Rank_Third_Year ~ simpson_index +
boxofficemojo.com_openingtheaters +
imdb.com_runtime + mpaa_numeric +
average_budget +
imdb.com_year +
imdb.com_sequel +
imdb.com_spinoff +
imdb.com_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
imdb.com_basedontvmovie +
Nominee +
Winner +
the_numbers_com_dirpower_rank +
Total_Star_Power - 1 +
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller +
Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History +
Horror + Music + Documentary + Western, # Include all genre variables
data = subset_data)
# Print model summary
summary(model_after_2016)
# Subset your data based on your criteria
subset_data_bef_2016 <- thanos%>%
filter(imdb.com_year <= 2016)
# Create the regression model with dummy variables using the subsetted data
model_before_2016 <- lm(Avg_Rank_Third_Year.y ~ simpson_index +
boxofficemojo.com_openingtheaters +
imdb.com_runtime + mpaa_numeric +
average_budget +
imdb.com_year +
imdb.com_sequel +
imdb.com_spinoff +
imdb.com_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
imdb.com_basedontvmovie +
Nominee +
Winner +
the_numbers_com_dirpower_rank +
Total_Star_Power - 1 +
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller +
Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History +
Horror + Music + Documentary + Western, # Include all genre variables
data = subset_data_bef_2016 )
# Create the regression model with dummy variables using the subsetted data
model_before_2016 <- lm(Avg_Rank_Third_Year ~ simpson_index +
boxofficemojo.com_openingtheaters +
imdb.com_runtime + mpaa_numeric +
average_budget +
imdb.com_year +
imdb.com_sequel +
imdb.com_spinoff +
imdb.com_remake +
imdb.com_basedonbook +
imdb.com_basedonbookseries +
imdb.com_basedonplay +
imdb.com_basedoncomic +
imdb.com_basedoncomicbook +
imdb.com_basedonnovel +
imdb.com_basedonshortstory +
imdb.com_basedontvmovie +
Nominee +
Winner +
the_numbers_com_dirpower_rank +
Total_Star_Power - 1 +
Action + Adventure + Comedy + Fantasy + Crime + Drama + Mystery + Thriller +
Romance + Sci.Fi + Biography + Sport + War + Family + Musical + History +
Horror + Music + Documentary + Western, # Include all genre variables
data = subset_data_bef_2016 )
# Print model summary
summary(model_before_2016)
install.packages("interactions")
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
df <- read_csv("gen/data-preparation/output/thanos_endgame.csv")
setwd("~/Master/Thesis")
install.packages("interactions")
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
df <- read_csv("gen/data-preparation/output/thanos_endgame.csv")
install.packages("interactions")
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
df <- read_csv("gen/data-preparation/output/thanos_endgame.csv")
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
df <- read_csv("gen/data-preparation/output/thanos_endgame.csv")
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
df <- read_csv("gen/data-preparation/output/thanos_endgame.csv")
df$treatment <- ifelse(df$simpson_index > 0.3627456, 1, 0)
# Add the treatment variable and imdb.com_releasedate to movie_ranks
movie_ranks <- movie_ranks %>%
left_join(df %>% select(treatment, imdb.com_imdbid, imdb.com_releasedate),
by = c("Movie_ID" = "imdb.com_imdbid"))
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
df <- read_csv("gen/data-preparation/output/thanos_endgame.csv")
movie
# load packages
library(interactions)
library(readr)
library(dplyr)
library(broom)
library(ggplot2)
library(ggpubr)
library(car)
df <- read_csv("gen/data-preparation/output/thanos_endgame.csv")
movie
movie_ranks <- read_csv("gen/data-preparation/output/movie_ranks.csv")
df$treatment <- ifelse(df$simpson_index > 0.3627456, 1, 0)
# Add the treatment variable and imdb.com_releasedate to movie_ranks
movie_ranks <- movie_ranks %>%
left_join(df %>% select(treatment, imdb.com_imdbid, imdb.com_releasedate),
by = c("Movie_ID" = "imdb.com_imdbid"))
# Convert imdb.com_releasedate to Date format (if not already)
movie_ranks <- movie_ranks %>%
mutate(imdb.com_releasedate = as.Date(imdb.com_releasedate))
# Filter the dataset to keep only observations where Date is after imdb.com_releasedate
filtered_movie_ranks <- movie_ranks %>%
filter(Date >= imdb.com_releasedate)
filtered_movie_ranks <- filtered_movie_ranks %>%
filter(imdb.com_releasedate > 2003)
# Calculate z-scores for Rank
filtered_movie_ranks$z_score <- scale(filtered_movie_ranks$Rank)
# Define a threshold for acceptable z-scores (e.g., within 3 standard deviations)
threshold <- 30
# Identify outliers
outliers <- filtered_movie_ranks[abs(filtered_movie_ranks$z_score) > threshold, ]
# Create a filtered dataset without outliers
filtered_movie_ranks <- filtered_movie_ranks[abs(filtered_movie_ranks$z_score) <= threshold, ]
# Remove the z_score variable as it's no longer needed
filtered_movie_ranks$z_score <- NULL
# Assuming your data frame is named movie_ranks
# Filter the data into treatment and control groups
treatment_group <- movie_ranks %>%
filter(treatment == 1) %>%
group_by(Date) %>%
summarise(avg_rank = mean(Rank))
# Filter the data into treatment and control groups
treatment_group <- filtered_movie_ranks %>%
filter(treatment == 1) %>%
group_by(Date) %>%
summarise(avg_rank = mean(Rank))
# Create the plot with facets
ggplot(combined_data, aes(x = Date, y = avg_rank, color = group)) +
geom_line(size = 1) +
labs(title = "Average Ranking Over Time",
x = "Date/Year",
y = "Average Ranking") +
scale_color_manual(values = c("Treatment Group" = "blue", "Control Group" = "red")) +
facet_grid(. ~ group) +
theme_minimal()
library(ggplot2)
# Create the plot
ggplot() +
geom_line(data = treatment_group, aes(x = Date, y = avg_rank, color = "Treatment Group"), size = 1) +
geom_line(data = control_group, aes(x = Date, y = avg_rank, color = "Control Group"), size = 1) +
labs(title = "Average Ranking Over Time",
x = "Date/Year",
y = "Average Ranking") +
scale_color_manual(values = c("Treatment Group" = "blue", "Control Group" = "red")) +
theme_minimal()
movie_ranks$time_indicator <- as.integer(movie_ranks$Date >= as.Date("2015-02-01"))
model_diff <- lm(Rank ~ treatment * time_indicator, data = movie_ranks)
summary(model_diff)
filtered_movie_ranks$time_indicator <- as.integer(filtered_movie_ranks$Date >= as.Date("2015-02-01"))
model_diff_filtered <- lm(Rank ~ treatment * time_indicator, data = filtered_movie_ranks)
summary(model_diff_filtered)
df$hard_treatment <- ifelse(df$simpson_index > 0.4, 1, 0)
# Add the treatment variable and imdb.com_releasedate to movie_ranks
hard_treatment_movie_ranks <- movie_ranks %>%
left_join(df %>% select(hard_treatment, imdb.com_imdbid, imdb.com_releasedate),
by = c("Movie_ID" = "imdb.com_imdbid"))
# Convert imdb.com_releasedate to Date format (if not already)
hard_treatment_movie_ranks <- hard_treatment_movie_ranks %>%
mutate(imdb.com_releasedate = as.Date(imdb.com_releasedate))
hard_treatment_movie_ranks$time_indicator <- as.integer(hard_treatment_movie_ranks$Date >= as.Date("2015-02-01"))
model_diff_hard <- lm(Rank ~ hard_treatment * time_indicator, data = hard_treatment_movie_ranks)
summary(model_diff_hard)
hard_filtered_movie_ranks$time_indicator <- as.integer(hard_filtered_movie_ranks$Date >= as.Date("2015-02-01"))
library(ggplot2)
# Create the plot
ggplot() +
geom_line(data = treatment_group, aes(x = Date, y = avg_rank, color = "Treatment Group"), size = 1) +
geom_line(data = control_group, aes(x = Date, y = avg_rank, color = "Control Group"), size = 1) +
labs(title = "Average Ranking Over Time",
x = "Date/Year",
y = "Average Ranking") +
scale_color_manual(values = c("Treatment Group" = "blue", "Control Group" = "red")) +
theme_minimal()
# Assuming your data frame is named movie_ranks
# Filter the data into treatment and control groups
treatment_group <- movie_ranks %>%
filter(treatment == 1) %>%
group_by(Date) %>%
summarise(avg_rank = mean(Rank))
control_group <- filtered_movie_ranks %>%
filter(treatment == 0) %>%
group_by(Date) %>%
summarise(avg_rank = mean(Rank))
# Create the plot with facets
ggplot(combined_data, aes(x = Date, y = avg_rank, color = group)) +
geom_line(size = 1) +
labs(title = "Average Ranking Over Time",
x = "Date/Year",
y = "Average Ranking") +
scale_color_manual(values = c("Treatment Group" = "blue", "Control Group" = "red")) +
facet_grid(. ~ group) +
theme_minimal()
library(ggplot2)
# Create the plot
ggplot() +
geom_line(data = treatment_group, aes(x = Date, y = avg_rank, color = "Treatment Group"), size = 1) +
geom_line(data = control_group, aes(x = Date, y = avg_rank, color = "Control Group"), size = 1) +
labs(title = "Average Ranking Over Time",
x = "Date/Year",
y = "Average Ranking") +
scale_color_manual(values = c("Treatment Group" = "blue", "Control Group" = "red")) +
theme_minimal()
movie_ranks$time_indicator <- as.integer(movie_ranks$Date >= as.Date("2015-02-01"))
model_diff <- lm(Rank ~ treatment * time_indicator, data = movie_ranks)
summary(model_diff)
filtered_movie_ranks$time_indicator <- as.integer(filtered_movie_ranks$Date >= as.Date("2015-02-01"))
model_diff_filtered <- lm(Rank ~ treatment * time_indicator, data = filtered_movie_ranks)
summary(model_diff_filtered)
df$hard_treatment <- ifelse(df$simpson_index > 0.4, 1, 0)
# Add the treatment variable and imdb.com_releasedate to movie_ranks
hard_treatment_movie_ranks <- movie_ranks %>%
left_join(df %>% select(hard_treatment, imdb.com_imdbid, imdb.com_releasedate),
by = c("Movie_ID" = "imdb.com_imdbid"))
# Convert imdb.com_releasedate to Date format (if not already)
hard_treatment_movie_ranks <- hard_treatment_movie_ranks %>%
mutate(imdb.com_releasedate = as.Date(imdb.com_releasedate))
library(readr)
merged_A_Copy1_Simple_Favor_2018_720p_BluRay_X264_DEFLATE_HI <- read_csv("merged_A-Copy1.Simple.Favor.2018.720p.BluRay.X264-DEFLATE-HI.csv")
View(merged_A_Copy1_Simple_Favor_2018_720p_BluRay_X264_DEFLATE_HI)
library(readr)
merged_A_Copy1_Simple_Favor_2018_720p_BluRay_X264_DEFLATE_HI <- read_csv("merged_A-Copy1.Simple.Favor.2018.720p.BluRay.X264-DEFLATE-HI.csv")
View(merged_A_Copy1_Simple_Favor_2018_720p_BluRay_X264_DEFLATE_HI)
library(readr)
merged_A_Copy1_Simple_Favor_2018_720p_BluRay_X264_DEFLATE_HI <- read_csv("merged_A-Copy1.Simple.Favor.2018.720p.BluRay.X264-DEFLATE-HI.csv")
View(merged_A_Copy1_Simple_Favor_2018_720p_BluRay_X264_DEFLATE_HI)
library(readr)
merged_2015_BlackMass_ING_ <- read_csv("merged_(2015)BlackMass[ING].csv")
View(merged_2015_BlackMass_ING_)
library(readr)
X01_2000_Coyote_Ugly_ENGLISH_Hearing_Impaired_By_Ammar_Schwarzenegger <- read_csv("01 - 2000 Coyote Ugly - [ENGLISH] Hearing Impaired By Ammar Schwarzenegger.csv")
View(X01_2000_Coyote_Ugly_ENGLISH_Hearing_Impaired_By_Ammar_Schwarzenegger)
library(readr)
X21_Jump_Street_2012_720p_x264_DTS_HDChina_english <- read_csv("21.Jump.Street.2012.720p.x264.DTS-HDChina.english.csv")
View(X21_Jump_Street_2012_720p_x264_DTS_HDChina_english)
library(readr)
X_2015_BlackMass_ING_ <- read_csv("(2015)BlackMass[ING].csv")
View(X_2015_BlackMass_ING_)
library(readr)
X01_2000_Coyote_Ugly_ENGLISH_Hearing_Impaired_By_Ammar_Schwarzenegger <- read_csv("01 - 2000 Coyote Ugly - [ENGLISH] Hearing Impaired By Ammar Schwarzenegger.csv")
View(X01_2000_Coyote_Ugly_ENGLISH_Hearing_Impaired_By_Ammar_Schwarzenegger)
library(readr)
X102_Dalmatians_2000_1080p_WEBRip_DD5_1_x264_NTb <- read_csv("102.Dalmatians.2000.1080p.WEBRip.DD5.1.x264-NTb.csv")
View(X102_Dalmatians_2000_1080p_WEBRip_DD5_1_x264_NTb)
library(readr)
X1080p_BluRay_x264 <- read_csv("1080p.BluRay.x264.csv")
View(X1080p_BluRay_x264)
